
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800322c  0800322c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800322c  0800322c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800322c  0800322c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000074  080032a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080032a8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0b3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6b  00000000  00000000  0002a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ef6  00000000  00000000  0002d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1c0  00000000  00000000  00044156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082780  00000000  00000000  00050316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2a96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  000d2aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080031f0 	.word	0x080031f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080031f0 	.word	0x080031f0

0800014c <display7SEG>:

#define ENABLE_SEG 0
#define DISABLE_SEG 1

void display7SEG(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48c6      	ldr	r0, [pc, #792]	; (80004ac <display7SEG+0x360>)
 8000192:	f002 f818 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48c4      	ldr	r0, [pc, #784]	; (80004ac <display7SEG+0x360>)
 800019c:	f002 f813 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48c1      	ldr	r0, [pc, #772]	; (80004ac <display7SEG+0x360>)
 80001a6:	f002 f80e 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48bf      	ldr	r0, [pc, #764]	; (80004ac <display7SEG+0x360>)
 80001b0:	f002 f809 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48bc      	ldr	r0, [pc, #752]	; (80004ac <display7SEG+0x360>)
 80001ba:	f002 f804 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48ba      	ldr	r0, [pc, #744]	; (80004ac <display7SEG+0x360>)
 80001c4:	f001 ffff 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48b7      	ldr	r0, [pc, #732]	; (80004ac <display7SEG+0x360>)
 80001ce:	f001 fffa 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80001d2:	e167      	b.n	80004a4 <display7SEG+0x358>
		case 1:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_OFF);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48b4      	ldr	r0, [pc, #720]	; (80004ac <display7SEG+0x360>)
 80001da:	f001 fff4 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48b2      	ldr	r0, [pc, #712]	; (80004ac <display7SEG+0x360>)
 80001e4:	f001 ffef 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	48af      	ldr	r0, [pc, #700]	; (80004ac <display7SEG+0x360>)
 80001ee:	f001 ffea 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	48ad      	ldr	r0, [pc, #692]	; (80004ac <display7SEG+0x360>)
 80001f8:	f001 ffe5 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	48aa      	ldr	r0, [pc, #680]	; (80004ac <display7SEG+0x360>)
 8000202:	f001 ffe0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	48a8      	ldr	r0, [pc, #672]	; (80004ac <display7SEG+0x360>)
 800020c:	f001 ffdb 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	48a5      	ldr	r0, [pc, #660]	; (80004ac <display7SEG+0x360>)
 8000216:	f001 ffd6 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 800021a:	e143      	b.n	80004a4 <display7SEG+0x358>
		case 2:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	48a2      	ldr	r0, [pc, #648]	; (80004ac <display7SEG+0x360>)
 8000222:	f001 ffd0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	48a0      	ldr	r0, [pc, #640]	; (80004ac <display7SEG+0x360>)
 800022c:	f001 ffcb 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_OFF);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	489d      	ldr	r0, [pc, #628]	; (80004ac <display7SEG+0x360>)
 8000236:	f001 ffc6 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	489b      	ldr	r0, [pc, #620]	; (80004ac <display7SEG+0x360>)
 8000240:	f001 ffc1 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4898      	ldr	r0, [pc, #608]	; (80004ac <display7SEG+0x360>)
 800024a:	f001 ffbc 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4896      	ldr	r0, [pc, #600]	; (80004ac <display7SEG+0x360>)
 8000254:	f001 ffb7 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4893      	ldr	r0, [pc, #588]	; (80004ac <display7SEG+0x360>)
 800025e:	f001 ffb2 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 8000262:	e11f      	b.n	80004a4 <display7SEG+0x358>
		case 3:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	4890      	ldr	r0, [pc, #576]	; (80004ac <display7SEG+0x360>)
 800026a:	f001 ffac 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	488e      	ldr	r0, [pc, #568]	; (80004ac <display7SEG+0x360>)
 8000274:	f001 ffa7 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	488b      	ldr	r0, [pc, #556]	; (80004ac <display7SEG+0x360>)
 800027e:	f001 ffa2 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4889      	ldr	r0, [pc, #548]	; (80004ac <display7SEG+0x360>)
 8000288:	f001 ff9d 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4886      	ldr	r0, [pc, #536]	; (80004ac <display7SEG+0x360>)
 8000292:	f001 ff98 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4884      	ldr	r0, [pc, #528]	; (80004ac <display7SEG+0x360>)
 800029c:	f001 ff93 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	4881      	ldr	r0, [pc, #516]	; (80004ac <display7SEG+0x360>)
 80002a6:	f001 ff8e 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80002aa:	e0fb      	b.n	80004a4 <display7SEG+0x358>
		case 4:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_OFF);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	487e      	ldr	r0, [pc, #504]	; (80004ac <display7SEG+0x360>)
 80002b2:	f001 ff88 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	487c      	ldr	r0, [pc, #496]	; (80004ac <display7SEG+0x360>)
 80002bc:	f001 ff83 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4879      	ldr	r0, [pc, #484]	; (80004ac <display7SEG+0x360>)
 80002c6:	f001 ff7e 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4877      	ldr	r0, [pc, #476]	; (80004ac <display7SEG+0x360>)
 80002d0:	f001 ff79 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4874      	ldr	r0, [pc, #464]	; (80004ac <display7SEG+0x360>)
 80002da:	f001 ff74 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4872      	ldr	r0, [pc, #456]	; (80004ac <display7SEG+0x360>)
 80002e4:	f001 ff6f 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	486f      	ldr	r0, [pc, #444]	; (80004ac <display7SEG+0x360>)
 80002ee:	f001 ff6a 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80002f2:	e0d7      	b.n	80004a4 <display7SEG+0x358>
		case 5:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	486c      	ldr	r0, [pc, #432]	; (80004ac <display7SEG+0x360>)
 80002fa:	f001 ff64 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_OFF);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	486a      	ldr	r0, [pc, #424]	; (80004ac <display7SEG+0x360>)
 8000304:	f001 ff5f 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4867      	ldr	r0, [pc, #412]	; (80004ac <display7SEG+0x360>)
 800030e:	f001 ff5a 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4865      	ldr	r0, [pc, #404]	; (80004ac <display7SEG+0x360>)
 8000318:	f001 ff55 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4862      	ldr	r0, [pc, #392]	; (80004ac <display7SEG+0x360>)
 8000322:	f001 ff50 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	4860      	ldr	r0, [pc, #384]	; (80004ac <display7SEG+0x360>)
 800032c:	f001 ff4b 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	485d      	ldr	r0, [pc, #372]	; (80004ac <display7SEG+0x360>)
 8000336:	f001 ff46 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 800033a:	e0b3      	b.n	80004a4 <display7SEG+0x358>
		case 6:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	485a      	ldr	r0, [pc, #360]	; (80004ac <display7SEG+0x360>)
 8000342:	f001 ff40 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_OFF);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4858      	ldr	r0, [pc, #352]	; (80004ac <display7SEG+0x360>)
 800034c:	f001 ff3b 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4855      	ldr	r0, [pc, #340]	; (80004ac <display7SEG+0x360>)
 8000356:	f001 ff36 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4853      	ldr	r0, [pc, #332]	; (80004ac <display7SEG+0x360>)
 8000360:	f001 ff31 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4850      	ldr	r0, [pc, #320]	; (80004ac <display7SEG+0x360>)
 800036a:	f001 ff2c 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	484e      	ldr	r0, [pc, #312]	; (80004ac <display7SEG+0x360>)
 8000374:	f001 ff27 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	484b      	ldr	r0, [pc, #300]	; (80004ac <display7SEG+0x360>)
 800037e:	f001 ff22 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 8000382:	e08f      	b.n	80004a4 <display7SEG+0x358>
		case 7:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4848      	ldr	r0, [pc, #288]	; (80004ac <display7SEG+0x360>)
 800038a:	f001 ff1c 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4846      	ldr	r0, [pc, #280]	; (80004ac <display7SEG+0x360>)
 8000394:	f001 ff17 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4843      	ldr	r0, [pc, #268]	; (80004ac <display7SEG+0x360>)
 800039e:	f001 ff12 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	4841      	ldr	r0, [pc, #260]	; (80004ac <display7SEG+0x360>)
 80003a8:	f001 ff0d 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	483e      	ldr	r0, [pc, #248]	; (80004ac <display7SEG+0x360>)
 80003b2:	f001 ff08 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	483c      	ldr	r0, [pc, #240]	; (80004ac <display7SEG+0x360>)
 80003bc:	f001 ff03 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4839      	ldr	r0, [pc, #228]	; (80004ac <display7SEG+0x360>)
 80003c6:	f001 fefe 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80003ca:	e06b      	b.n	80004a4 <display7SEG+0x358>
		case 8:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4836      	ldr	r0, [pc, #216]	; (80004ac <display7SEG+0x360>)
 80003d2:	f001 fef8 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4834      	ldr	r0, [pc, #208]	; (80004ac <display7SEG+0x360>)
 80003dc:	f001 fef3 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4831      	ldr	r0, [pc, #196]	; (80004ac <display7SEG+0x360>)
 80003e6:	f001 feee 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	482f      	ldr	r0, [pc, #188]	; (80004ac <display7SEG+0x360>)
 80003f0:	f001 fee9 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	482c      	ldr	r0, [pc, #176]	; (80004ac <display7SEG+0x360>)
 80003fa:	f001 fee4 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	482a      	ldr	r0, [pc, #168]	; (80004ac <display7SEG+0x360>)
 8000404:	f001 fedf 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4827      	ldr	r0, [pc, #156]	; (80004ac <display7SEG+0x360>)
 800040e:	f001 feda 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 8000412:	e047      	b.n	80004a4 <display7SEG+0x358>
		case 9:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4824      	ldr	r0, [pc, #144]	; (80004ac <display7SEG+0x360>)
 800041a:	f001 fed4 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4822      	ldr	r0, [pc, #136]	; (80004ac <display7SEG+0x360>)
 8000424:	f001 fecf 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	481f      	ldr	r0, [pc, #124]	; (80004ac <display7SEG+0x360>)
 800042e:	f001 feca 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	481d      	ldr	r0, [pc, #116]	; (80004ac <display7SEG+0x360>)
 8000438:	f001 fec5 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	481a      	ldr	r0, [pc, #104]	; (80004ac <display7SEG+0x360>)
 8000442:	f001 fec0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4818      	ldr	r0, [pc, #96]	; (80004ac <display7SEG+0x360>)
 800044c:	f001 febb 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4815      	ldr	r0, [pc, #84]	; (80004ac <display7SEG+0x360>)
 8000456:	f001 feb6 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 800045a:	e023      	b.n	80004a4 <display7SEG+0x358>
		default:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_OFF);
 800045c:	2201      	movs	r2, #1
 800045e:	2101      	movs	r1, #1
 8000460:	4812      	ldr	r0, [pc, #72]	; (80004ac <display7SEG+0x360>)
 8000462:	f001 feb0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_OFF);
 8000466:	2201      	movs	r2, #1
 8000468:	2102      	movs	r1, #2
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <display7SEG+0x360>)
 800046c:	f001 feab 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_OFF);
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <display7SEG+0x360>)
 8000476:	f001 fea6 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 800047a:	2201      	movs	r2, #1
 800047c:	2108      	movs	r1, #8
 800047e:	480b      	ldr	r0, [pc, #44]	; (80004ac <display7SEG+0x360>)
 8000480:	f001 fea1 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 8000484:	2201      	movs	r2, #1
 8000486:	2110      	movs	r1, #16
 8000488:	4808      	ldr	r0, [pc, #32]	; (80004ac <display7SEG+0x360>)
 800048a:	f001 fe9c 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 800048e:	2201      	movs	r2, #1
 8000490:	2120      	movs	r1, #32
 8000492:	4806      	ldr	r0, [pc, #24]	; (80004ac <display7SEG+0x360>)
 8000494:	f001 fe97 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 8000498:	2201      	movs	r2, #1
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <display7SEG+0x360>)
 800049e:	f001 fe92 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80004a2:	bf00      	nop
	}
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <display7SEG_2>:
void display7SEG_2(int num)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b09      	cmp	r3, #9
 80004bc:	f200 81be 	bhi.w	800083c <display7SEG_2+0x38c>
 80004c0:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <display7SEG_2+0x18>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004f1 	.word	0x080004f1
 80004cc:	08000545 	.word	0x08000545
 80004d0:	08000599 	.word	0x08000599
 80004d4:	080005ed 	.word	0x080005ed
 80004d8:	08000641 	.word	0x08000641
 80004dc:	08000695 	.word	0x08000695
 80004e0:	080006e9 	.word	0x080006e9
 80004e4:	0800073d 	.word	0x0800073d
 80004e8:	08000791 	.word	0x08000791
 80004ec:	080007e5 	.word	0x080007e5
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	48d0      	ldr	r0, [pc, #832]	; (8000838 <display7SEG_2+0x388>)
 80004f6:	f001 fe66 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	48cd      	ldr	r0, [pc, #820]	; (8000838 <display7SEG_2+0x388>)
 8000502:	f001 fe60 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	48ca      	ldr	r0, [pc, #808]	; (8000838 <display7SEG_2+0x388>)
 800050e:	f001 fe5a 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	48c7      	ldr	r0, [pc, #796]	; (8000838 <display7SEG_2+0x388>)
 800051a:	f001 fe54 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000524:	48c4      	ldr	r0, [pc, #784]	; (8000838 <display7SEG_2+0x388>)
 8000526:	f001 fe4e 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	48c1      	ldr	r0, [pc, #772]	; (8000838 <display7SEG_2+0x388>)
 8000532:	f001 fe48 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053c:	48be      	ldr	r0, [pc, #760]	; (8000838 <display7SEG_2+0x388>)
 800053e:	f001 fe42 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 8000542:	e1a5      	b.n	8000890 <display7SEG_2+0x3e0>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_OFF);
 8000544:	2201      	movs	r2, #1
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	48bb      	ldr	r0, [pc, #748]	; (8000838 <display7SEG_2+0x388>)
 800054a:	f001 fe3c 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000554:	48b8      	ldr	r0, [pc, #736]	; (8000838 <display7SEG_2+0x388>)
 8000556:	f001 fe36 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000560:	48b5      	ldr	r0, [pc, #724]	; (8000838 <display7SEG_2+0x388>)
 8000562:	f001 fe30 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	48b2      	ldr	r0, [pc, #712]	; (8000838 <display7SEG_2+0x388>)
 800056e:	f001 fe2a 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000578:	48af      	ldr	r0, [pc, #700]	; (8000838 <display7SEG_2+0x388>)
 800057a:	f001 fe24 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	48ac      	ldr	r0, [pc, #688]	; (8000838 <display7SEG_2+0x388>)
 8000586:	f001 fe1e 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	48a9      	ldr	r0, [pc, #676]	; (8000838 <display7SEG_2+0x388>)
 8000592:	f001 fe18 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 8000596:	e17b      	b.n	8000890 <display7SEG_2+0x3e0>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 8000598:	2200      	movs	r2, #0
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	48a6      	ldr	r0, [pc, #664]	; (8000838 <display7SEG_2+0x388>)
 800059e:	f001 fe12 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48a3      	ldr	r0, [pc, #652]	; (8000838 <display7SEG_2+0x388>)
 80005aa:	f001 fe0c 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_OFF);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	48a0      	ldr	r0, [pc, #640]	; (8000838 <display7SEG_2+0x388>)
 80005b6:	f001 fe06 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	489d      	ldr	r0, [pc, #628]	; (8000838 <display7SEG_2+0x388>)
 80005c2:	f001 fe00 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	489a      	ldr	r0, [pc, #616]	; (8000838 <display7SEG_2+0x388>)
 80005ce:	f001 fdfa 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	4897      	ldr	r0, [pc, #604]	; (8000838 <display7SEG_2+0x388>)
 80005da:	f001 fdf4 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4894      	ldr	r0, [pc, #592]	; (8000838 <display7SEG_2+0x388>)
 80005e6:	f001 fdee 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80005ea:	e151      	b.n	8000890 <display7SEG_2+0x3e0>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	4891      	ldr	r0, [pc, #580]	; (8000838 <display7SEG_2+0x388>)
 80005f2:	f001 fde8 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fc:	488e      	ldr	r0, [pc, #568]	; (8000838 <display7SEG_2+0x388>)
 80005fe:	f001 fde2 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000608:	488b      	ldr	r0, [pc, #556]	; (8000838 <display7SEG_2+0x388>)
 800060a:	f001 fddc 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	4888      	ldr	r0, [pc, #544]	; (8000838 <display7SEG_2+0x388>)
 8000616:	f001 fdd6 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	4885      	ldr	r0, [pc, #532]	; (8000838 <display7SEG_2+0x388>)
 8000622:	f001 fdd0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062c:	4882      	ldr	r0, [pc, #520]	; (8000838 <display7SEG_2+0x388>)
 800062e:	f001 fdca 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	487f      	ldr	r0, [pc, #508]	; (8000838 <display7SEG_2+0x388>)
 800063a:	f001 fdc4 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 800063e:	e127      	b.n	8000890 <display7SEG_2+0x3e0>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_OFF);
 8000640:	2201      	movs	r2, #1
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	487c      	ldr	r0, [pc, #496]	; (8000838 <display7SEG_2+0x388>)
 8000646:	f001 fdbe 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	4879      	ldr	r0, [pc, #484]	; (8000838 <display7SEG_2+0x388>)
 8000652:	f001 fdb8 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	4876      	ldr	r0, [pc, #472]	; (8000838 <display7SEG_2+0x388>)
 800065e:	f001 fdb2 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000668:	4873      	ldr	r0, [pc, #460]	; (8000838 <display7SEG_2+0x388>)
 800066a:	f001 fdac 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000674:	4870      	ldr	r0, [pc, #448]	; (8000838 <display7SEG_2+0x388>)
 8000676:	f001 fda6 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	486d      	ldr	r0, [pc, #436]	; (8000838 <display7SEG_2+0x388>)
 8000682:	f001 fda0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	486a      	ldr	r0, [pc, #424]	; (8000838 <display7SEG_2+0x388>)
 800068e:	f001 fd9a 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 8000692:	e0fd      	b.n	8000890 <display7SEG_2+0x3e0>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4867      	ldr	r0, [pc, #412]	; (8000838 <display7SEG_2+0x388>)
 800069a:	f001 fd94 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_OFF);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	4864      	ldr	r0, [pc, #400]	; (8000838 <display7SEG_2+0x388>)
 80006a6:	f001 fd8e 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4861      	ldr	r0, [pc, #388]	; (8000838 <display7SEG_2+0x388>)
 80006b2:	f001 fd88 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006bc:	485e      	ldr	r0, [pc, #376]	; (8000838 <display7SEG_2+0x388>)
 80006be:	f001 fd82 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	485b      	ldr	r0, [pc, #364]	; (8000838 <display7SEG_2+0x388>)
 80006ca:	f001 fd7c 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	4858      	ldr	r0, [pc, #352]	; (8000838 <display7SEG_2+0x388>)
 80006d6:	f001 fd76 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	4855      	ldr	r0, [pc, #340]	; (8000838 <display7SEG_2+0x388>)
 80006e2:	f001 fd70 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80006e6:	e0d3      	b.n	8000890 <display7SEG_2+0x3e0>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	4852      	ldr	r0, [pc, #328]	; (8000838 <display7SEG_2+0x388>)
 80006ee:	f001 fd6a 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_OFF);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f8:	484f      	ldr	r0, [pc, #316]	; (8000838 <display7SEG_2+0x388>)
 80006fa:	f001 fd64 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000704:	484c      	ldr	r0, [pc, #304]	; (8000838 <display7SEG_2+0x388>)
 8000706:	f001 fd5e 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000710:	4849      	ldr	r0, [pc, #292]	; (8000838 <display7SEG_2+0x388>)
 8000712:	f001 fd58 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4846      	ldr	r0, [pc, #280]	; (8000838 <display7SEG_2+0x388>)
 800071e:	f001 fd52 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000728:	4843      	ldr	r0, [pc, #268]	; (8000838 <display7SEG_2+0x388>)
 800072a:	f001 fd4c 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	4840      	ldr	r0, [pc, #256]	; (8000838 <display7SEG_2+0x388>)
 8000736:	f001 fd46 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 800073a:	e0a9      	b.n	8000890 <display7SEG_2+0x3e0>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 800073c:	2200      	movs	r2, #0
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	483d      	ldr	r0, [pc, #244]	; (8000838 <display7SEG_2+0x388>)
 8000742:	f001 fd40 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	483a      	ldr	r0, [pc, #232]	; (8000838 <display7SEG_2+0x388>)
 800074e:	f001 fd3a 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000758:	4837      	ldr	r0, [pc, #220]	; (8000838 <display7SEG_2+0x388>)
 800075a:	f001 fd34 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000764:	4834      	ldr	r0, [pc, #208]	; (8000838 <display7SEG_2+0x388>)
 8000766:	f001 fd2e 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000770:	4831      	ldr	r0, [pc, #196]	; (8000838 <display7SEG_2+0x388>)
 8000772:	f001 fd28 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077c:	482e      	ldr	r0, [pc, #184]	; (8000838 <display7SEG_2+0x388>)
 800077e:	f001 fd22 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	482b      	ldr	r0, [pc, #172]	; (8000838 <display7SEG_2+0x388>)
 800078a:	f001 fd1c 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 800078e:	e07f      	b.n	8000890 <display7SEG_2+0x3e0>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 8000790:	2200      	movs	r2, #0
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4828      	ldr	r0, [pc, #160]	; (8000838 <display7SEG_2+0x388>)
 8000796:	f001 fd16 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <display7SEG_2+0x388>)
 80007a2:	f001 fd10 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	4822      	ldr	r0, [pc, #136]	; (8000838 <display7SEG_2+0x388>)
 80007ae:	f001 fd0a 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	481f      	ldr	r0, [pc, #124]	; (8000838 <display7SEG_2+0x388>)
 80007ba:	f001 fd04 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <display7SEG_2+0x388>)
 80007c6:	f001 fcfe 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <display7SEG_2+0x388>)
 80007d2:	f001 fcf8 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	4816      	ldr	r0, [pc, #88]	; (8000838 <display7SEG_2+0x388>)
 80007de:	f001 fcf2 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 80007e2:	e055      	b.n	8000890 <display7SEG_2+0x3e0>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <display7SEG_2+0x388>)
 80007ea:	f001 fcec 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <display7SEG_2+0x388>)
 80007f6:	f001 fce6 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <display7SEG_2+0x388>)
 8000802:	f001 fce0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <display7SEG_2+0x388>)
 800080e:	f001 fcda 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <display7SEG_2+0x388>)
 800081a:	f001 fcd4 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <display7SEG_2+0x388>)
 8000826:	f001 fcce 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4801      	ldr	r0, [pc, #4]	; (8000838 <display7SEG_2+0x388>)
 8000832:	f001 fcc8 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 8000836:	e02b      	b.n	8000890 <display7SEG_2+0x3e0>
 8000838:	40010c00 	.word	0x40010c00
		default:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_OFF);
 800083c:	2201      	movs	r2, #1
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	4815      	ldr	r0, [pc, #84]	; (8000898 <display7SEG_2+0x3e8>)
 8000842:	f001 fcc0 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_OFF);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <display7SEG_2+0x3e8>)
 800084e:	f001 fcba 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_OFF);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <display7SEG_2+0x3e8>)
 800085a:	f001 fcb4 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <display7SEG_2+0x3e8>)
 8000866:	f001 fcae 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <display7SEG_2+0x3e8>)
 8000872:	f001 fca8 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <display7SEG_2+0x3e8>)
 800087e:	f001 fca2 	bl	80021c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <display7SEG_2+0x3e8>)
 800088a:	f001 fc9c 	bl	80021c6 <HAL_GPIO_WritePin>
			break;
 800088e:	bf00      	nop
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40010c00 	.word	0x40010c00

0800089c <enable_seg_0_1>:

void enable_seg_0_1(int num)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    switch (num) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <enable_seg_0_1+0x16>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d00b      	beq.n	80008c8 <enable_seg_0_1+0x2c>
 80008b0:	e015      	b.n	80008de <enable_seg_0_1+0x42>
        case 0:
            HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, ENABLE_SEG);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2102      	movs	r1, #2
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <enable_seg_0_1+0x60>)
 80008b8:	f001 fc85 	bl	80021c6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, DISABLE_SEG);
 80008bc:	2201      	movs	r2, #1
 80008be:	2104      	movs	r1, #4
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <enable_seg_0_1+0x60>)
 80008c2:	f001 fc80 	bl	80021c6 <HAL_GPIO_WritePin>
            break;
 80008c6:	e015      	b.n	80008f4 <enable_seg_0_1+0x58>
        case 1:
            HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, DISABLE_SEG);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2102      	movs	r1, #2
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <enable_seg_0_1+0x60>)
 80008ce:	f001 fc7a 	bl	80021c6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, ENABLE_SEG);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2104      	movs	r1, #4
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <enable_seg_0_1+0x60>)
 80008d8:	f001 fc75 	bl	80021c6 <HAL_GPIO_WritePin>
            break;
 80008dc:	e00a      	b.n	80008f4 <enable_seg_0_1+0x58>
        default:
            HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, DISABLE_SEG);
 80008de:	2201      	movs	r2, #1
 80008e0:	2102      	movs	r1, #2
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <enable_seg_0_1+0x60>)
 80008e4:	f001 fc6f 	bl	80021c6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, DISABLE_SEG);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2104      	movs	r1, #4
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <enable_seg_0_1+0x60>)
 80008ee:	f001 fc6a 	bl	80021c6 <HAL_GPIO_WritePin>
            break;
 80008f2:	bf00      	nop
    }
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40010800 	.word	0x40010800

08000900 <enable_seg_2_3>:
void enable_seg_2_3(int num)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    switch (num) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <enable_seg_2_3+0x16>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d00b      	beq.n	800092c <enable_seg_2_3+0x2c>
 8000914:	e015      	b.n	8000942 <enable_seg_2_3+0x42>
        case 0:
            HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, ENABLE_SEG);
 8000916:	2200      	movs	r2, #0
 8000918:	2108      	movs	r1, #8
 800091a:	4811      	ldr	r0, [pc, #68]	; (8000960 <enable_seg_2_3+0x60>)
 800091c:	f001 fc53 	bl	80021c6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, DISABLE_SEG);
 8000920:	2201      	movs	r2, #1
 8000922:	2110      	movs	r1, #16
 8000924:	480e      	ldr	r0, [pc, #56]	; (8000960 <enable_seg_2_3+0x60>)
 8000926:	f001 fc4e 	bl	80021c6 <HAL_GPIO_WritePin>
            break;
 800092a:	e015      	b.n	8000958 <enable_seg_2_3+0x58>
        case 1:
            HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, DISABLE_SEG);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <enable_seg_2_3+0x60>)
 8000932:	f001 fc48 	bl	80021c6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, ENABLE_SEG);
 8000936:	2200      	movs	r2, #0
 8000938:	2110      	movs	r1, #16
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <enable_seg_2_3+0x60>)
 800093c:	f001 fc43 	bl	80021c6 <HAL_GPIO_WritePin>
            break;
 8000940:	e00a      	b.n	8000958 <enable_seg_2_3+0x58>
        default:
            HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, DISABLE_SEG);
 8000942:	2201      	movs	r2, #1
 8000944:	2108      	movs	r1, #8
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <enable_seg_2_3+0x60>)
 8000948:	f001 fc3d 	bl	80021c6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, DISABLE_SEG);
 800094c:	2201      	movs	r2, #1
 800094e:	2110      	movs	r1, #16
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <enable_seg_2_3+0x60>)
 8000952:	f001 fc38 	bl	80021c6 <HAL_GPIO_WritePin>
            break;
 8000956:	bf00      	nop
    }
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010800 	.word	0x40010800

08000964 <updatebuffer2>:

void updatebuffer2(int duration)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	 led_buffer_2[0] = (duration/ 10) % 10;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <updatebuffer2+0x58>)
 8000970:	fb82 1203 	smull	r1, r2, r2, r3
 8000974:	1092      	asrs	r2, r2, #2
 8000976:	17db      	asrs	r3, r3, #31
 8000978:	1ad1      	subs	r1, r2, r3
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <updatebuffer2+0x58>)
 800097c:	fb83 2301 	smull	r2, r3, r3, r1
 8000980:	109a      	asrs	r2, r3, #2
 8000982:	17cb      	asrs	r3, r1, #31
 8000984:	1ad2      	subs	r2, r2, r3
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1aca      	subs	r2, r1, r3
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <updatebuffer2+0x5c>)
 8000992:	601a      	str	r2, [r3, #0]
	 led_buffer_2[1] = duration % 10;
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <updatebuffer2+0x58>)
 8000998:	fb83 2301 	smull	r2, r3, r3, r1
 800099c:	109a      	asrs	r2, r3, #2
 800099e:	17cb      	asrs	r3, r1, #31
 80009a0:	1ad2      	subs	r2, r2, r3
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	1aca      	subs	r2, r1, r3
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <updatebuffer2+0x5c>)
 80009ae:	605a      	str	r2, [r3, #4]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	66666667 	.word	0x66666667
 80009c0:	200000b0 	.word	0x200000b0

080009c4 <updatebuffer1>:
void updatebuffer1(int duration)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	 led_buffer_1[0] = (duration/ 10) % 10;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <updatebuffer1+0x58>)
 80009d0:	fb82 1203 	smull	r1, r2, r2, r3
 80009d4:	1092      	asrs	r2, r2, #2
 80009d6:	17db      	asrs	r3, r3, #31
 80009d8:	1ad1      	subs	r1, r2, r3
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <updatebuffer1+0x58>)
 80009dc:	fb83 2301 	smull	r2, r3, r3, r1
 80009e0:	109a      	asrs	r2, r3, #2
 80009e2:	17cb      	asrs	r3, r1, #31
 80009e4:	1ad2      	subs	r2, r2, r3
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	1aca      	subs	r2, r1, r3
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <updatebuffer1+0x5c>)
 80009f2:	601a      	str	r2, [r3, #0]
	 led_buffer_1[1] = duration % 10;
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <updatebuffer1+0x58>)
 80009f8:	fb83 2301 	smull	r2, r3, r3, r1
 80009fc:	109a      	asrs	r2, r3, #2
 80009fe:	17cb      	asrs	r3, r1, #31
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	4613      	mov	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1aca      	subs	r2, r1, r3
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <updatebuffer1+0x5c>)
 8000a0e:	605a      	str	r2, [r3, #4]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	66666667 	.word	0x66666667
 8000a20:	200000a8 	.word	0x200000a8

08000a24 <isButtonPressed>:
int KeyReg1 [3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg2 [3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3 [3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress [3] = {500, 500, 500};

int isButtonPressed(int button){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	if (button_flag[button] == 1){
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <isButtonPressed+0x30>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d106      	bne.n	8000a46 <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <isButtonPressed+0x30>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <isButtonPressed+0x24>
	}
	return 0;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000090 	.word	0x20000090

08000a58 <subKeyProcess>:

void subKeyProcess(int button){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <subKeyProcess+0x1c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2101      	movs	r1, #1
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000090 	.word	0x20000090

08000a78 <getKeyInput>:


void getKeyInput(int button){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	KeyReg0[button] = KeyReg1[button];
 8000a80:	4a37      	ldr	r2, [pc, #220]	; (8000b60 <getKeyInput+0xe8>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a88:	4936      	ldr	r1, [pc, #216]	; (8000b64 <getKeyInput+0xec>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[button] = KeyReg2[button];
 8000a90:	4a35      	ldr	r2, [pc, #212]	; (8000b68 <getKeyInput+0xf0>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a98:	4931      	ldr	r1, [pc, #196]	; (8000b60 <getKeyInput+0xe8>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[button] = HAL_GPIO_ReadPin(BUTTON_PORT[button], BUTTON_PIN[button]);
 8000aa0:	4a32      	ldr	r2, [pc, #200]	; (8000b6c <getKeyInput+0xf4>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa8:	4931      	ldr	r1, [pc, #196]	; (8000b70 <getKeyInput+0xf8>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	f001 fb70 	bl	8002198 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <getKeyInput+0xf0>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[button] == KeyReg1[button]) && (KeyReg1[button] == KeyReg2[button])){
 8000ac4:	4a27      	ldr	r2, [pc, #156]	; (8000b64 <getKeyInput+0xec>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000acc:	4924      	ldr	r1, [pc, #144]	; (8000b60 <getKeyInput+0xe8>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d13f      	bne.n	8000b58 <getKeyInput+0xe0>
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <getKeyInput+0xe8>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae0:	4921      	ldr	r1, [pc, #132]	; (8000b68 <getKeyInput+0xf0>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d135      	bne.n	8000b58 <getKeyInput+0xe0>
		if (KeyReg3[button] != KeyReg2[button]){
 8000aec:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <getKeyInput+0xfc>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af4:	491c      	ldr	r1, [pc, #112]	; (8000b68 <getKeyInput+0xf0>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d017      	beq.n	8000b30 <getKeyInput+0xb8>
			KeyReg3[button] = KeyReg2[button];
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <getKeyInput+0xf0>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b08:	491a      	ldr	r1, [pc, #104]	; (8000b74 <getKeyInput+0xfc>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[button] == PRESSED_STATE){
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <getKeyInput+0xf0>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d11d      	bne.n	8000b58 <getKeyInput+0xe0>
				subKeyProcess(button);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff9b 	bl	8000a58 <subKeyProcess>
				TimerForKeyPress[button] = 500;
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <getKeyInput+0x100>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
				KeyReg3[button] = NORMAL_STATE;
			}
		}
	}
}
 8000b2e:	e013      	b.n	8000b58 <getKeyInput+0xe0>
			TimerForKeyPress[button]--;
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <getKeyInput+0x100>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	490f      	ldr	r1, [pc, #60]	; (8000b78 <getKeyInput+0x100>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <getKeyInput+0x100>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dc04      	bgt.n	8000b58 <getKeyInput+0xe0>
				KeyReg3[button] = NORMAL_STATE;
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <getKeyInput+0xfc>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2101      	movs	r1, #1
 8000b54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000020 	.word	0x20000020
 8000b64:	20000014 	.word	0x20000014
 8000b68:	2000002c 	.word	0x2000002c
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	20000038 	.word	0x20000038
 8000b78:	20000044 	.word	0x20000044

08000b7c <fsm_automatic_run1>:
#include "global.h"
#include "main.h"


void fsm_automatic_run1()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

	if (timer1_counter % 100 == 0){
 8000b82:	4b4e      	ldr	r3, [pc, #312]	; (8000cbc <fsm_automatic_run1+0x140>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b4e      	ldr	r3, [pc, #312]	; (8000cc0 <fsm_automatic_run1+0x144>)
 8000b88:	fb83 1302 	smull	r1, r3, r3, r2
 8000b8c:	1159      	asrs	r1, r3, #5
 8000b8e:	17d3      	asrs	r3, r2, #31
 8000b90:	1acb      	subs	r3, r1, r3
 8000b92:	2164      	movs	r1, #100	; 0x64
 8000b94:	fb01 f303 	mul.w	r3, r1, r3
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10b      	bne.n	8000bb6 <fsm_automatic_run1+0x3a>

			int remaining_time = timer1_counter / 100;
 8000b9e:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <fsm_automatic_run1+0x140>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a47      	ldr	r2, [pc, #284]	; (8000cc0 <fsm_automatic_run1+0x144>)
 8000ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba8:	1152      	asrs	r2, r2, #5
 8000baa:	17db      	asrs	r3, r3, #31
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	607b      	str	r3, [r7, #4]
			updatebuffer1(remaining_time);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff07 	bl	80009c4 <updatebuffer1>


		}

	    if(timer2_flag ==1 )
 8000bb6:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <fsm_automatic_run1+0x148>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d11c      	bne.n	8000bf8 <fsm_automatic_run1+0x7c>
	    {
	        setTimer2(300);
 8000bbe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bc2:	f000 fdfd 	bl	80017c0 <setTimer2>
	        display7SEG(led_buffer_1[index_led_1]);
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <fsm_automatic_run1+0x14c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <fsm_automatic_run1+0x150>)
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fabb 	bl	800014c <display7SEG>
		    enable_seg_0_1(index_led_1);
 8000bd6:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <fsm_automatic_run1+0x14c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe5e 	bl	800089c <enable_seg_0_1>
			index_led_1++;
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <fsm_automatic_run1+0x14c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a38      	ldr	r2, [pc, #224]	; (8000cc8 <fsm_automatic_run1+0x14c>)
 8000be8:	6013      	str	r3, [r2, #0]
			if (index_led_1 > 1) {
 8000bea:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <fsm_automatic_run1+0x14c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	dd02      	ble.n	8000bf8 <fsm_automatic_run1+0x7c>
		    index_led_1 = 0;
 8000bf2:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <fsm_automatic_run1+0x14c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
		  }

	    }
		switch(LED_STATE1)
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <fsm_automatic_run1+0x154>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d857      	bhi.n	8000cb2 <fsm_automatic_run1+0x136>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <fsm_automatic_run1+0x8c>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c19 	.word	0x08000c19
 8000c0c:	08000c37 	.word	0x08000c37
 8000c10:	08000c5d 	.word	0x08000c5d
 8000c14:	08000c83 	.word	0x08000c83
		{
		case INIT_STATE:
			setup1();
 8000c18:	f000 fb72 	bl	8001300 <setup1>
			setTimer1(RED_DURATION*1000);
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <fsm_automatic_run1+0x158>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c24:	fb02 f303 	mul.w	r3, r2, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fd91 	bl	8001750 <setTimer1>
			LED_STATE1= AUTO_RED;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <fsm_automatic_run1+0x154>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	601a      	str	r2, [r3, #0]
			break ;
 8000c34:	e03d      	b.n	8000cb2 <fsm_automatic_run1+0x136>
		case AUTO_RED:
			red_led1();
 8000c36:	f000 fbc3 	bl	80013c0 <red_led1>
			if(timer1_flag ==1)
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <fsm_automatic_run1+0x15c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d132      	bne.n	8000ca8 <fsm_automatic_run1+0x12c>
			{
				setTimer1(GREEN_DURATION*1000);
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <fsm_automatic_run1+0x160>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4a:	fb02 f303 	mul.w	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fd7e 	bl	8001750 <setTimer1>
			    LED_STATE1= AUTO_GREEN;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <fsm_automatic_run1+0x154>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	601a      	str	r2, [r3, #0]
			}
			break ;
 8000c5a:	e025      	b.n	8000ca8 <fsm_automatic_run1+0x12c>
		case AUTO_GREEN:
			green_led1();
 8000c5c:	f000 fbc8 	bl	80013f0 <green_led1>
			if(timer1_flag ==1 )
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <fsm_automatic_run1+0x15c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d121      	bne.n	8000cac <fsm_automatic_run1+0x130>
			{
				setTimer1(YELLOW_DURATION*1000);
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <fsm_automatic_run1+0x164>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fd6b 	bl	8001750 <setTimer1>
				LED_STATE1 = AUTO_YELLOW;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <fsm_automatic_run1+0x154>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c80:	e014      	b.n	8000cac <fsm_automatic_run1+0x130>
		case AUTO_YELLOW:
			yellow_led1();
 8000c82:	f000 fbcd 	bl	8001420 <yellow_led1>
			if(timer1_flag ==1 )
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <fsm_automatic_run1+0x15c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d110      	bne.n	8000cb0 <fsm_automatic_run1+0x134>
			{
				setTimer1(RED_DURATION*1000);
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <fsm_automatic_run1+0x158>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fd58 	bl	8001750 <setTimer1>
				LED_STATE1 = AUTO_RED;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <fsm_automatic_run1+0x154>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ca6:	e003      	b.n	8000cb0 <fsm_automatic_run1+0x134>
			break ;
 8000ca8:	bf00      	nop
 8000caa:	e002      	b.n	8000cb2 <fsm_automatic_run1+0x136>
			break;
 8000cac:	bf00      	nop
 8000cae:	e000      	b.n	8000cb2 <fsm_automatic_run1+0x136>
			break;
 8000cb0:	bf00      	nop

		}



}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000b8 	.word	0x200000b8
 8000cc0:	51eb851f 	.word	0x51eb851f
 8000cc4:	200000c4 	.word	0x200000c4
 8000cc8:	200000a0 	.word	0x200000a0
 8000ccc:	200000a8 	.word	0x200000a8
 8000cd0:	20000050 	.word	0x20000050
 8000cd4:	2000005c 	.word	0x2000005c
 8000cd8:	200000bc 	.word	0x200000bc
 8000cdc:	20000064 	.word	0x20000064
 8000ce0:	20000060 	.word	0x20000060

08000ce4 <fsm_automatic_run2>:
void fsm_automatic_run2()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

	if (timer3_counter % 100 == 0){
 8000cea:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <fsm_automatic_run2+0x140>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <fsm_automatic_run2+0x144>)
 8000cf0:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf4:	1159      	asrs	r1, r3, #5
 8000cf6:	17d3      	asrs	r3, r2, #31
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	2164      	movs	r1, #100	; 0x64
 8000cfc:	fb01 f303 	mul.w	r3, r1, r3
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10b      	bne.n	8000d1e <fsm_automatic_run2+0x3a>

		int remaining_time = timer3_counter / 100;
 8000d06:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <fsm_automatic_run2+0x140>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <fsm_automatic_run2+0x144>)
 8000d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d10:	1152      	asrs	r2, r2, #5
 8000d12:	17db      	asrs	r3, r3, #31
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	607b      	str	r3, [r7, #4]
		updatebuffer2(remaining_time);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fe23 	bl	8000964 <updatebuffer2>


	}

    if(timer4_flag ==1 )
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <fsm_automatic_run2+0x148>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d11c      	bne.n	8000d60 <fsm_automatic_run2+0x7c>
    {
        setTimer4(300);
 8000d26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d2a:	f000 fd81 	bl	8001830 <setTimer4>
        display7SEG_2(led_buffer_2[index_led_2]);
 8000d2e:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <fsm_automatic_run2+0x14c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a40      	ldr	r2, [pc, #256]	; (8000e34 <fsm_automatic_run2+0x150>)
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fbb9 	bl	80004b0 <display7SEG_2>
	    enable_seg_2_3(index_led_2);
 8000d3e:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <fsm_automatic_run2+0x14c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fddc 	bl	8000900 <enable_seg_2_3>
		index_led_2++;
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <fsm_automatic_run2+0x14c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a38      	ldr	r2, [pc, #224]	; (8000e30 <fsm_automatic_run2+0x14c>)
 8000d50:	6013      	str	r3, [r2, #0]
		if (index_led_2 > 1) {
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <fsm_automatic_run2+0x14c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	dd02      	ble.n	8000d60 <fsm_automatic_run2+0x7c>
	    index_led_2 = 0;
 8000d5a:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <fsm_automatic_run2+0x14c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
	  }

    }
	switch(LED_STATE2)
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <fsm_automatic_run2+0x154>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d857      	bhi.n	8000e1a <fsm_automatic_run2+0x136>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <fsm_automatic_run2+0x8c>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000d81 	.word	0x08000d81
 8000d74:	08000d9f 	.word	0x08000d9f
 8000d78:	08000dc5 	.word	0x08000dc5
 8000d7c:	08000deb 	.word	0x08000deb
	{
	case INIT_STATE:
		setup2();
 8000d80:	f000 fb06 	bl	8001390 <setup2>
		setTimer3(GREEN_DURATION*1000);
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <fsm_automatic_run2+0x158>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fd31 	bl	80017f8 <setTimer3>
		LED_STATE2= AUTO_GREEN;
 8000d96:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <fsm_automatic_run2+0x154>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	601a      	str	r2, [r3, #0]
		break ;
 8000d9c:	e03d      	b.n	8000e1a <fsm_automatic_run2+0x136>
	case AUTO_RED:
		red_led2();
 8000d9e:	f000 fb57 	bl	8001450 <red_led2>
		if(timer3_flag ==1)
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <fsm_automatic_run2+0x15c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d132      	bne.n	8000e10 <fsm_automatic_run2+0x12c>
		{
			setTimer3(GREEN_DURATION*1000);
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <fsm_automatic_run2+0x158>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fd1e 	bl	80017f8 <setTimer3>
		    LED_STATE2= AUTO_GREEN;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <fsm_automatic_run2+0x154>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	601a      	str	r2, [r3, #0]
		}
		break ;
 8000dc2:	e025      	b.n	8000e10 <fsm_automatic_run2+0x12c>
	case AUTO_GREEN:
		green_led2();
 8000dc4:	f000 fb5c 	bl	8001480 <green_led2>
		if(timer3_flag ==1 )
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <fsm_automatic_run2+0x15c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d121      	bne.n	8000e14 <fsm_automatic_run2+0x130>
		{
			setTimer3(YELLOW_DURATION*1000);
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <fsm_automatic_run2+0x160>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fd0b 	bl	80017f8 <setTimer3>
			LED_STATE2 = AUTO_YELLOW;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <fsm_automatic_run2+0x154>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	601a      	str	r2, [r3, #0]
		}
		break;
 8000de8:	e014      	b.n	8000e14 <fsm_automatic_run2+0x130>
	case AUTO_YELLOW:
		yellow_led2();
 8000dea:	f000 fb61 	bl	80014b0 <yellow_led2>
		if(timer3_flag ==1 )
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <fsm_automatic_run2+0x15c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d110      	bne.n	8000e18 <fsm_automatic_run2+0x134>
		{
			setTimer3(RED_DURATION*1000);
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <fsm_automatic_run2+0x164>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fcf8 	bl	80017f8 <setTimer3>
			LED_STATE2 = AUTO_RED;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <fsm_automatic_run2+0x154>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e0e:	e003      	b.n	8000e18 <fsm_automatic_run2+0x134>
		break ;
 8000e10:	bf00      	nop
 8000e12:	e002      	b.n	8000e1a <fsm_automatic_run2+0x136>
		break;
 8000e14:	bf00      	nop
 8000e16:	e000      	b.n	8000e1a <fsm_automatic_run2+0x136>
		break;
 8000e18:	bf00      	nop

	}



}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000c8 	.word	0x200000c8
 8000e28:	51eb851f 	.word	0x51eb851f
 8000e2c:	200000d4 	.word	0x200000d4
 8000e30:	200000a4 	.word	0x200000a4
 8000e34:	200000b0 	.word	0x200000b0
 8000e38:	20000054 	.word	0x20000054
 8000e3c:	20000064 	.word	0x20000064
 8000e40:	200000cc 	.word	0x200000cc
 8000e44:	20000060 	.word	0x20000060
 8000e48:	2000005c 	.word	0x2000005c

08000e4c <change_mode>:


int tempDuration = 0;

void change_mode(int mode )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	setup1();
 8000e54:	f000 fa54 	bl	8001300 <setup1>
	setup2();
 8000e58:	f000 fa9a 	bl	8001390 <setup2>
	MODE = mode;
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <change_mode+0x24>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
	setTimer7(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f000 fd1c 	bl	80018a0 <setTimer7>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000058 	.word	0x20000058

08000e74 <displayDuration>:

void displayDuration(int mode, int duration) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
    led_buffer_1[0] = 0;            // LED 0 hiển thị chế độ (mode)
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <displayDuration+0xd0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
    led_buffer_1[1] = mode ;
 8000e84:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <displayDuration+0xd0>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6053      	str	r3, [r2, #4]
    led_buffer_2[1] = duration % 10;   // LED 2 hiển thị hàng đơn vị của duration
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <displayDuration+0xd4>)
 8000e8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e92:	109a      	asrs	r2, r3, #2
 8000e94:	17cb      	asrs	r3, r1, #31
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	1aca      	subs	r2, r1, r3
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <displayDuration+0xd8>)
 8000ea4:	605a      	str	r2, [r3, #4]
    led_buffer_2[0] = duration / 10;   // LED 3 hiển thị hàng chục của duration
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <displayDuration+0xd4>)
 8000eaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000eae:	1092      	asrs	r2, r2, #2
 8000eb0:	17db      	asrs	r3, r3, #31
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <displayDuration+0xd8>)
 8000eb6:	6013      	str	r3, [r2, #0]
    if(timer5_flag ==1 )
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <displayDuration+0xdc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11c      	bne.n	8000efa <displayDuration+0x86>
    {
    	setTimer5(300);
 8000ec0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ec4:	f000 fc60 	bl	8001788 <setTimer5>
    	display7SEG(led_buffer_1[index_led_1]);
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <displayDuration+0xe0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <displayDuration+0xd0>)
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f93a 	bl	800014c <display7SEG>
    	enable_seg_0_1(index_led_1);
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <displayDuration+0xe0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fcdd 	bl	800089c <enable_seg_0_1>
        index_led_1++;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <displayDuration+0xe0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <displayDuration+0xe0>)
 8000eea:	6013      	str	r3, [r2, #0]
    	if (index_led_1 > 1)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <displayDuration+0xe0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	dd02      	ble.n	8000efa <displayDuration+0x86>
        {
        index_led_1 = 0;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <displayDuration+0xe0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
        }
    }
    if(timer6_flag ==1 )
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <displayDuration+0xe4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d11c      	bne.n	8000f3c <displayDuration+0xc8>
    {
    	setTimer6(300);
 8000f02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f06:	f000 fcaf 	bl	8001868 <setTimer6>
    	display7SEG_2(led_buffer_2[index_led_2]);
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <displayDuration+0xe8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <displayDuration+0xd8>)
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff facb 	bl	80004b0 <display7SEG_2>
    	enable_seg_2_3(index_led_2);
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <displayDuration+0xe8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fcee 	bl	8000900 <enable_seg_2_3>
        index_led_2++;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <displayDuration+0xe8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <displayDuration+0xe8>)
 8000f2c:	6013      	str	r3, [r2, #0]
    	if (index_led_2 > 1)
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <displayDuration+0xe8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	dd02      	ble.n	8000f3c <displayDuration+0xc8>
        {
        index_led_2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <displayDuration+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
        }
    }

}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000a8 	.word	0x200000a8
 8000f48:	66666667 	.word	0x66666667
 8000f4c:	200000b0 	.word	0x200000b0
 8000f50:	200000dc 	.word	0x200000dc
 8000f54:	200000a0 	.word	0x200000a0
 8000f58:	200000e4 	.word	0x200000e4
 8000f5c:	200000a4 	.word	0x200000a4

08000f60 <fsm_manual_run>:


void fsm_manual_run()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	switch(MODE)
 8000f64:	4bba      	ldr	r3, [pc, #744]	; (8001250 <fsm_manual_run+0x2f0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3b0a      	subs	r3, #10
 8000f6a:	2b0a      	cmp	r3, #10
 8000f6c:	f200 81b3 	bhi.w	80012d6 <fsm_manual_run+0x376>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <fsm_manual_run+0x18>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000fa5 	.word	0x08000fa5
 8000f7c:	08001067 	.word	0x08001067
 8000f80:	0800108d 	.word	0x0800108d
 8000f84:	080010ff 	.word	0x080010ff
 8000f88:	08001171 	.word	0x08001171
 8000f8c:	080011f3 	.word	0x080011f3
 8000f90:	08001221 	.word	0x08001221
 8000f94:	080012a9 	.word	0x080012a9
 8000f98:	080011e3 	.word	0x080011e3
 8000f9c:	08001299 	.word	0x08001299
 8000fa0:	08001289 	.word	0x08001289
	{
	    case INIT_MODE:
	    	 init1();
 8000fa4:	f000 f9c4 	bl	8001330 <init1>
	    	 init2();
 8000fa8:	f000 f9da 	bl	8001360 <init2>
	    	 led_buffer_1[0] = 0;
 8000fac:	4ba9      	ldr	r3, [pc, #676]	; (8001254 <fsm_manual_run+0x2f4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	    	 led_buffer_1[1] = 0;
 8000fb2:	4ba8      	ldr	r3, [pc, #672]	; (8001254 <fsm_manual_run+0x2f4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
	    	 led_buffer_2[1] = 0;
 8000fb8:	4ba7      	ldr	r3, [pc, #668]	; (8001258 <fsm_manual_run+0x2f8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
	    	 led_buffer_2[0] = 0;
 8000fbe:	4ba6      	ldr	r3, [pc, #664]	; (8001258 <fsm_manual_run+0x2f8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
	    	    if(timer5_flag ==1 )
 8000fc4:	4ba5      	ldr	r3, [pc, #660]	; (800125c <fsm_manual_run+0x2fc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d11c      	bne.n	8001006 <fsm_manual_run+0xa6>
	    	    {
	    	    	setTimer5(300);
 8000fcc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fd0:	f000 fbda 	bl	8001788 <setTimer5>
	    	    	display7SEG(led_buffer_1[index_led_1]);
 8000fd4:	4ba2      	ldr	r3, [pc, #648]	; (8001260 <fsm_manual_run+0x300>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a9e      	ldr	r2, [pc, #632]	; (8001254 <fsm_manual_run+0x2f4>)
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8b4 	bl	800014c <display7SEG>
	    	    	enable_seg_0_1(index_led_1);
 8000fe4:	4b9e      	ldr	r3, [pc, #632]	; (8001260 <fsm_manual_run+0x300>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fc57 	bl	800089c <enable_seg_0_1>
	    	        index_led_1++;
 8000fee:	4b9c      	ldr	r3, [pc, #624]	; (8001260 <fsm_manual_run+0x300>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a9a      	ldr	r2, [pc, #616]	; (8001260 <fsm_manual_run+0x300>)
 8000ff6:	6013      	str	r3, [r2, #0]
	    	    	if (index_led_1 > 1)
 8000ff8:	4b99      	ldr	r3, [pc, #612]	; (8001260 <fsm_manual_run+0x300>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	dd02      	ble.n	8001006 <fsm_manual_run+0xa6>
	    	        {
	    	        index_led_1 = 0;
 8001000:	4b97      	ldr	r3, [pc, #604]	; (8001260 <fsm_manual_run+0x300>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	    	        }
	    	    }
	    	    if(timer6_flag ==1 )
 8001006:	4b97      	ldr	r3, [pc, #604]	; (8001264 <fsm_manual_run+0x304>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d11c      	bne.n	8001048 <fsm_manual_run+0xe8>
	    	    {
	    	    	setTimer6(300);
 800100e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001012:	f000 fc29 	bl	8001868 <setTimer6>
	    	    	display7SEG_2(led_buffer_2[index_led_2]);
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <fsm_manual_run+0x308>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a8f      	ldr	r2, [pc, #572]	; (8001258 <fsm_manual_run+0x2f8>)
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa45 	bl	80004b0 <display7SEG_2>
	    	    	enable_seg_2_3(index_led_2);
 8001026:	4b90      	ldr	r3, [pc, #576]	; (8001268 <fsm_manual_run+0x308>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fc68 	bl	8000900 <enable_seg_2_3>
	    	        index_led_2++;
 8001030:	4b8d      	ldr	r3, [pc, #564]	; (8001268 <fsm_manual_run+0x308>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a8c      	ldr	r2, [pc, #560]	; (8001268 <fsm_manual_run+0x308>)
 8001038:	6013      	str	r3, [r2, #0]
	    	    	if (index_led_2 > 1)
 800103a:	4b8b      	ldr	r3, [pc, #556]	; (8001268 <fsm_manual_run+0x308>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	dd02      	ble.n	8001048 <fsm_manual_run+0xe8>
	    	        {
	    	        index_led_2 = 0;
 8001042:	4b89      	ldr	r3, [pc, #548]	; (8001268 <fsm_manual_run+0x308>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	    	        }
	    	    }
	    	    if (isButtonPressed(0) == 1){
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fceb 	bl	8000a24 <isButtonPressed>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	f040 8142 	bne.w	80012da <fsm_manual_run+0x37a>
	    	    	tempDuration = RED_DURATION;
 8001056:	4b85      	ldr	r3, [pc, #532]	; (800126c <fsm_manual_run+0x30c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a85      	ldr	r2, [pc, #532]	; (8001270 <fsm_manual_run+0x310>)
 800105c:	6013      	str	r3, [r2, #0]

	    	    	change_mode(MODE_1);
 800105e:	200b      	movs	r0, #11
 8001060:	f7ff fef4 	bl	8000e4c <change_mode>


	    	    }
	    	    break;
 8001064:	e139      	b.n	80012da <fsm_manual_run+0x37a>
	    case MODE_1:
	    	fsm_automatic_run1();
 8001066:	f7ff fd89 	bl	8000b7c <fsm_automatic_run1>
	    	fsm_automatic_run2();
 800106a:	f7ff fe3b 	bl	8000ce4 <fsm_automatic_run2>
	    	 if (isButtonPressed(0) == 1){
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fcd8 	bl	8000a24 <isButtonPressed>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	f040 8131 	bne.w	80012de <fsm_manual_run+0x37e>
	    		 tempDuration = RED_DURATION;
 800107c:	4b7b      	ldr	r3, [pc, #492]	; (800126c <fsm_manual_run+0x30c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <fsm_manual_run+0x310>)
 8001082:	6013      	str	r3, [r2, #0]
	    		  change_mode(MODE_2);
 8001084:	200c      	movs	r0, #12
 8001086:	f7ff fee1 	bl	8000e4c <change_mode>
	    	 }

	    	 break ;
 800108a:	e128      	b.n	80012de <fsm_manual_run+0x37e>

	    case MODE_2:// red
	    	displayDuration(2, tempDuration);
 800108c:	4b78      	ldr	r3, [pc, #480]	; (8001270 <fsm_manual_run+0x310>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	2002      	movs	r0, #2
 8001094:	f7ff feee 	bl	8000e74 <displayDuration>


	    	if(isButtonPressed(0)==1)
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fcc3 	bl	8000a24 <isButtonPressed>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d106      	bne.n	80010b2 <fsm_manual_run+0x152>
	    	{
	    		tempDuration = YELLOW_DURATION;
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <fsm_manual_run+0x314>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a71      	ldr	r2, [pc, #452]	; (8001270 <fsm_manual_run+0x310>)
 80010aa:	6013      	str	r3, [r2, #0]
	    		change_mode(MODE_3);
 80010ac:	200d      	movs	r0, #13
 80010ae:	f7ff fecd 	bl	8000e4c <change_mode>
	    	}

	    	if(timer7_flag ==1)
 80010b2:	4b71      	ldr	r3, [pc, #452]	; (8001278 <fsm_manual_run+0x318>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10d      	bne.n	80010d6 <fsm_manual_run+0x176>
	    	{
	    		setTimer7(500);
 80010ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010be:	f000 fbef 	bl	80018a0 <setTimer7>
	    		HAL_GPIO_TogglePin(RED_LED2_GPIO_Port, RED_LED2_Pin);
 80010c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c6:	486d      	ldr	r0, [pc, #436]	; (800127c <fsm_manual_run+0x31c>)
 80010c8:	f001 f895 	bl	80021f6 <HAL_GPIO_TogglePin>
	    	    HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);
 80010cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d0:	486a      	ldr	r0, [pc, #424]	; (800127c <fsm_manual_run+0x31c>)
 80010d2:	f001 f890 	bl	80021f6 <HAL_GPIO_TogglePin>
	    	}
			if (isButtonPressed(1) == 1){
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fca4 	bl	8000a24 <isButtonPressed>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <fsm_manual_run+0x188>

				change_mode(RED_CONFIG);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f7ff feb2 	bl	8000e4c <change_mode>


			}
			if (isButtonPressed(2) == 1){
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff fc9b 	bl	8000a24 <isButtonPressed>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	f040 80f6 	bne.w	80012e2 <fsm_manual_run+0x382>
				change_mode(RED_CONFIRM);
 80010f6:	2012      	movs	r0, #18
 80010f8:	f7ff fea8 	bl	8000e4c <change_mode>
			}
	    	break ;
 80010fc:	e0f1      	b.n	80012e2 <fsm_manual_run+0x382>

	    case MODE_3://yellow
	    	displayDuration(3, tempDuration);
 80010fe:	4b5c      	ldr	r3, [pc, #368]	; (8001270 <fsm_manual_run+0x310>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	2003      	movs	r0, #3
 8001106:	f7ff feb5 	bl	8000e74 <displayDuration>

	    	if(isButtonPressed(0)==1)
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fc8a 	bl	8000a24 <isButtonPressed>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d106      	bne.n	8001124 <fsm_manual_run+0x1c4>
	    	{
	    		tempDuration = GREEN_DURATION;
 8001116:	4b5a      	ldr	r3, [pc, #360]	; (8001280 <fsm_manual_run+0x320>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a55      	ldr	r2, [pc, #340]	; (8001270 <fsm_manual_run+0x310>)
 800111c:	6013      	str	r3, [r2, #0]
	    		change_mode(MODE_4);
 800111e:	200e      	movs	r0, #14
 8001120:	f7ff fe94 	bl	8000e4c <change_mode>
	    	}

	    	if(timer7_flag ==1)
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <fsm_manual_run+0x318>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10d      	bne.n	8001148 <fsm_manual_run+0x1e8>
	    	{
	    		setTimer7(500);
 800112c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001130:	f000 fbb6 	bl	80018a0 <setTimer7>
	    		HAL_GPIO_TogglePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin);
 8001134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001138:	4850      	ldr	r0, [pc, #320]	; (800127c <fsm_manual_run+0x31c>)
 800113a:	f001 f85c 	bl	80021f6 <HAL_GPIO_TogglePin>
	    	    HAL_GPIO_TogglePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin);
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	484e      	ldr	r0, [pc, #312]	; (800127c <fsm_manual_run+0x31c>)
 8001144:	f001 f857 	bl	80021f6 <HAL_GPIO_TogglePin>
	    	}
			if (isButtonPressed(1) == 1){
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff fc6b 	bl	8000a24 <isButtonPressed>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d102      	bne.n	800115a <fsm_manual_run+0x1fa>
				change_mode(YELLOW_CONFIG);
 8001154:	2010      	movs	r0, #16
 8001156:	f7ff fe79 	bl	8000e4c <change_mode>

			}
			if (isButtonPressed(2) == 1){
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff fc62 	bl	8000a24 <isButtonPressed>
 8001160:	4603      	mov	r3, r0
 8001162:	2b01      	cmp	r3, #1
 8001164:	f040 80bf 	bne.w	80012e6 <fsm_manual_run+0x386>
				change_mode(YELLOW_CONFIRM);
 8001168:	2014      	movs	r0, #20
 800116a:	f7ff fe6f 	bl	8000e4c <change_mode>
			}
	    	break ;
 800116e:	e0ba      	b.n	80012e6 <fsm_manual_run+0x386>
	    case MODE_4://green
	    	displayDuration(4, tempDuration);
 8001170:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <fsm_manual_run+0x310>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	2004      	movs	r0, #4
 8001178:	f7ff fe7c 	bl	8000e74 <displayDuration>
	    	if(isButtonPressed(0)==1)
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fc51 	bl	8000a24 <isButtonPressed>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <fsm_manual_run+0x236>
	    	{
	    		tempDuration = RED_DURATION;
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <fsm_manual_run+0x30c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a38      	ldr	r2, [pc, #224]	; (8001270 <fsm_manual_run+0x310>)
 800118e:	6013      	str	r3, [r2, #0]
	    		change_mode(INIT_MODE);
 8001190:	200a      	movs	r0, #10
 8001192:	f7ff fe5b 	bl	8000e4c <change_mode>
	    	}

	    	if(timer7_flag ==1)
 8001196:	4b38      	ldr	r3, [pc, #224]	; (8001278 <fsm_manual_run+0x318>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d10d      	bne.n	80011ba <fsm_manual_run+0x25a>
	    	{
	    		setTimer7(500);
 800119e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a2:	f000 fb7d 	bl	80018a0 <setTimer7>
	    		HAL_GPIO_TogglePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin);
 80011a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011aa:	4834      	ldr	r0, [pc, #208]	; (800127c <fsm_manual_run+0x31c>)
 80011ac:	f001 f823 	bl	80021f6 <HAL_GPIO_TogglePin>
	    	    HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4831      	ldr	r0, [pc, #196]	; (800127c <fsm_manual_run+0x31c>)
 80011b6:	f001 f81e 	bl	80021f6 <HAL_GPIO_TogglePin>
	    	}
			if (isButtonPressed(1) == 1){
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fc32 	bl	8000a24 <isButtonPressed>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <fsm_manual_run+0x26c>
				change_mode(GREEN_CONFIG);
 80011c6:	2011      	movs	r0, #17
 80011c8:	f7ff fe40 	bl	8000e4c <change_mode>

			}
			if (isButtonPressed(2) == 1){
 80011cc:	2002      	movs	r0, #2
 80011ce:	f7ff fc29 	bl	8000a24 <isButtonPressed>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	f040 8088 	bne.w	80012ea <fsm_manual_run+0x38a>
				change_mode(GREEN_CONFIRM);
 80011da:	2013      	movs	r0, #19
 80011dc:	f7ff fe36 	bl	8000e4c <change_mode>
			}
	    	break ;
 80011e0:	e083      	b.n	80012ea <fsm_manual_run+0x38a>



	    case RED_CONFIRM:
	    	RED_DURATION = tempDuration;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <fsm_manual_run+0x310>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a21      	ldr	r2, [pc, #132]	; (800126c <fsm_manual_run+0x30c>)
 80011e8:	6013      	str	r3, [r2, #0]
	    	change_mode(MODE_2);
 80011ea:	200c      	movs	r0, #12
 80011ec:	f7ff fe2e 	bl	8000e4c <change_mode>
	    	break ;
 80011f0:	e07c      	b.n	80012ec <fsm_manual_run+0x38c>
	    case RED_CONFIG:
	    	tempDuration++;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <fsm_manual_run+0x310>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <fsm_manual_run+0x310>)
 80011fa:	6013      	str	r3, [r2, #0]
	    	tempDuration %= 100;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <fsm_manual_run+0x310>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <fsm_manual_run+0x324>)
 8001202:	fb83 1302 	smull	r1, r3, r3, r2
 8001206:	1159      	asrs	r1, r3, #5
 8001208:	17d3      	asrs	r3, r2, #31
 800120a:	1acb      	subs	r3, r1, r3
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a16      	ldr	r2, [pc, #88]	; (8001270 <fsm_manual_run+0x310>)
 8001216:	6013      	str	r3, [r2, #0]
	    	change_mode(MODE_2);
 8001218:	200c      	movs	r0, #12
 800121a:	f7ff fe17 	bl	8000e4c <change_mode>
	    	break;
 800121e:	e065      	b.n	80012ec <fsm_manual_run+0x38c>
	    case YELLOW_CONFIG:
	    	tempDuration++;
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <fsm_manual_run+0x310>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <fsm_manual_run+0x310>)
 8001228:	6013      	str	r3, [r2, #0]
	        tempDuration %= 100;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <fsm_manual_run+0x310>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <fsm_manual_run+0x324>)
 8001230:	fb83 1302 	smull	r1, r3, r3, r2
 8001234:	1159      	asrs	r1, r3, #5
 8001236:	17d3      	asrs	r3, r2, #31
 8001238:	1acb      	subs	r3, r1, r3
 800123a:	2164      	movs	r1, #100	; 0x64
 800123c:	fb01 f303 	mul.w	r3, r1, r3
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <fsm_manual_run+0x310>)
 8001244:	6013      	str	r3, [r2, #0]
	    	change_mode(MODE_3);
 8001246:	200d      	movs	r0, #13
 8001248:	f7ff fe00 	bl	8000e4c <change_mode>
	        break;
 800124c:	e04e      	b.n	80012ec <fsm_manual_run+0x38c>
 800124e:	bf00      	nop
 8001250:	20000058 	.word	0x20000058
 8001254:	200000a8 	.word	0x200000a8
 8001258:	200000b0 	.word	0x200000b0
 800125c:	200000dc 	.word	0x200000dc
 8001260:	200000a0 	.word	0x200000a0
 8001264:	200000e4 	.word	0x200000e4
 8001268:	200000a4 	.word	0x200000a4
 800126c:	2000005c 	.word	0x2000005c
 8001270:	2000009c 	.word	0x2000009c
 8001274:	20000060 	.word	0x20000060
 8001278:	200000ec 	.word	0x200000ec
 800127c:	40010800 	.word	0x40010800
 8001280:	20000064 	.word	0x20000064
 8001284:	51eb851f 	.word	0x51eb851f
	    case YELLOW_CONFIRM:
			YELLOW_DURATION = tempDuration;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <fsm_manual_run+0x390>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <fsm_manual_run+0x394>)
 800128e:	6013      	str	r3, [r2, #0]
			change_mode(MODE_3);
 8001290:	200d      	movs	r0, #13
 8001292:	f7ff fddb 	bl	8000e4c <change_mode>
			break ;
 8001296:	e029      	b.n	80012ec <fsm_manual_run+0x38c>
	    case GREEN_CONFIRM:
	    	GREEN_DURATION = tempDuration;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <fsm_manual_run+0x390>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <fsm_manual_run+0x398>)
 800129e:	6013      	str	r3, [r2, #0]
	    	change_mode(MODE_4);
 80012a0:	200e      	movs	r0, #14
 80012a2:	f7ff fdd3 	bl	8000e4c <change_mode>
	    	break;
 80012a6:	e021      	b.n	80012ec <fsm_manual_run+0x38c>
	    case GREEN_CONFIG:
	    	tempDuration++;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <fsm_manual_run+0x390>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <fsm_manual_run+0x390>)
 80012b0:	6013      	str	r3, [r2, #0]
	        tempDuration %= 100;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <fsm_manual_run+0x390>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <fsm_manual_run+0x39c>)
 80012b8:	fb83 1302 	smull	r1, r3, r3, r2
 80012bc:	1159      	asrs	r1, r3, #5
 80012be:	17d3      	asrs	r3, r2, #31
 80012c0:	1acb      	subs	r3, r1, r3
 80012c2:	2164      	movs	r1, #100	; 0x64
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <fsm_manual_run+0x390>)
 80012cc:	6013      	str	r3, [r2, #0]
	    	change_mode(MODE_4);
 80012ce:	200e      	movs	r0, #14
 80012d0:	f7ff fdbc 	bl	8000e4c <change_mode>
	        break;
 80012d4:	e00a      	b.n	80012ec <fsm_manual_run+0x38c>
		default:
			 break;
 80012d6:	bf00      	nop
 80012d8:	e008      	b.n	80012ec <fsm_manual_run+0x38c>
	    	    break;
 80012da:	bf00      	nop
 80012dc:	e006      	b.n	80012ec <fsm_manual_run+0x38c>
	    	 break ;
 80012de:	bf00      	nop
 80012e0:	e004      	b.n	80012ec <fsm_manual_run+0x38c>
	    	break ;
 80012e2:	bf00      	nop
 80012e4:	e002      	b.n	80012ec <fsm_manual_run+0x38c>
	    	break ;
 80012e6:	bf00      	nop
 80012e8:	e000      	b.n	80012ec <fsm_manual_run+0x38c>
	    	break ;
 80012ea:	bf00      	nop


	}


}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000009c 	.word	0x2000009c
 80012f4:	20000060 	.word	0x20000060
 80012f8:	20000064 	.word	0x20000064
 80012fc:	51eb851f 	.word	0x51eb851f

08001300 <setup1>:
#include "global.h"
#include "7seg.h"
#include "main.h"

void setup1()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, GPIO_PIN_SET);   // Tắt đèn đỏ Lane 1
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	4808      	ldr	r0, [pc, #32]	; (800132c <setup1+0x2c>)
 800130c:	f000 ff5b 	bl	80021c6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, GPIO_PIN_SET); // Tắt đèn xanh Lane 1
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <setup1+0x2c>)
 8001318:	f000 ff55 	bl	80021c6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, GPIO_PIN_SET); // Tắt đè
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001322:	4802      	ldr	r0, [pc, #8]	; (800132c <setup1+0x2c>)
 8001324:	f000 ff4f 	bl	80021c6 <HAL_GPIO_WritePin>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010800 	.word	0x40010800

08001330 <init1>:
void init1()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, GPIO_PIN_RESET);   // Tắt đèn đỏ Lane 1
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <init1+0x2c>)
 800133c:	f000 ff43 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, GPIO_PIN_RESET); // Tắt đèn xanh Lane 1
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <init1+0x2c>)
 8001348:	f000 ff3d 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, GPIO_PIN_RESET); // Tắt đè
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001352:	4802      	ldr	r0, [pc, #8]	; (800135c <init1+0x2c>)
 8001354:	f000 ff37 	bl	80021c6 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010800 	.word	0x40010800

08001360 <init2>:
void init2()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, GPIO_PIN_RESET);   // Tắt đèn đỏ Lane 1
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <init2+0x2c>)
 800136c:	f000 ff2b 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, GPIO_PIN_RESET); // Tắt đèn xanh Lane 1
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <init2+0x2c>)
 8001378:	f000 ff25 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, GPIO_PIN_RESET); // Tắt đè
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <init2+0x2c>)
 8001384:	f000 ff1f 	bl	80021c6 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40010800 	.word	0x40010800

08001390 <setup2>:

void setup2()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, GPIO_PIN_SET);   // Tắt đèn đỏ Lane 2
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <setup2+0x2c>)
 800139c:	f000 ff13 	bl	80021c6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, GPIO_PIN_SET); // Tắt đèn xanh Lane 2
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <setup2+0x2c>)
 80013a8:	f000 ff0d 	bl	80021c6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, GPIO_PIN_SET); // Tắt đèn vàng Lane 2
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b2:	4802      	ldr	r0, [pc, #8]	; (80013bc <setup2+0x2c>)
 80013b4:	f000 ff07 	bl	80021c6 <HAL_GPIO_WritePin>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40010800 	.word	0x40010800

080013c0 <red_led1>:
void red_led1() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, RESET);   // Bật đèn đỏ Lane 1
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <red_led1+0x2c>)
 80013cc:	f000 fefb 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET); // Tắt đèn xanh Lane 1
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <red_led1+0x2c>)
 80013d8:	f000 fef5 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET); // Tắt đèn vàng Lane 1
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4802      	ldr	r0, [pc, #8]	; (80013ec <red_led1+0x2c>)
 80013e4:	f000 feef 	bl	80021c6 <HAL_GPIO_WritePin>

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010800 	.word	0x40010800

080013f0 <green_led1>:

void green_led1() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);     // Tắt đèn đỏ Lane 1
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <green_led1+0x2c>)
 80013fc:	f000 fee3 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, RESET); // Bật đèn xanh Lane 1
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <green_led1+0x2c>)
 8001408:	f000 fedd 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET); // Tắt đèn vàng Lane 1
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <green_led1+0x2c>)
 8001414:	f000 fed7 	bl	80021c6 <HAL_GPIO_WritePin>

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010800 	.word	0x40010800

08001420 <yellow_led1>:

void yellow_led1() {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);     // Tắt đèn đỏ Lane 1
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <yellow_led1+0x2c>)
 800142c:	f000 fecb 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET); // Tắt đèn xanh Lane 1
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <yellow_led1+0x2c>)
 8001438:	f000 fec5 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, RESET); // Bật đèn vàng Lane 1
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001442:	4802      	ldr	r0, [pc, #8]	; (800144c <yellow_led1+0x2c>)
 8001444:	f000 febf 	bl	80021c6 <HAL_GPIO_WritePin>

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010800 	.word	0x40010800

08001450 <red_led2>:

void red_led2() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, RESET);   // Bật đèn đỏ Lane 2
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <red_led2+0x2c>)
 800145c:	f000 feb3 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET); // Tắt đèn xanh Lane 2
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <red_led2+0x2c>)
 8001468:	f000 fead 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, SET); // Tắt đèn vàng Lane 2
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001472:	4802      	ldr	r0, [pc, #8]	; (800147c <red_led2+0x2c>)
 8001474:	f000 fea7 	bl	80021c6 <HAL_GPIO_WritePin>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010800 	.word	0x40010800

08001480 <green_led2>:

void green_led2() {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);     // Tắt đèn đỏ Lane 2
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <green_led2+0x2c>)
 800148c:	f000 fe9b 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, RESET); // Bật đèn xanh Lane 2
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <green_led2+0x2c>)
 8001498:	f000 fe95 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, SET); // Tắt đèn vàng Lane 2
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a2:	4802      	ldr	r0, [pc, #8]	; (80014ac <green_led2+0x2c>)
 80014a4:	f000 fe8f 	bl	80021c6 <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010800 	.word	0x40010800

080014b0 <yellow_led2>:

void yellow_led2() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);     // Tắt đèn đỏ Lane 2
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <yellow_led2+0x2c>)
 80014bc:	f000 fe83 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET); // Tắt đèn xanh Lane 2
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <yellow_led2+0x2c>)
 80014c8:	f000 fe7d 	bl	80021c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, RESET); // Bật đèn vàng Lane 2
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d2:	4802      	ldr	r0, [pc, #8]	; (80014dc <yellow_led2+0x2c>)
 80014d4:	f000 fe77 	bl	80021c6 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010800 	.word	0x40010800

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e4:	f000 fb6e 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e8:	f000 f82e 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80014ec:	f000 f868 	bl	80015c0 <MX_TIM2_Init>
  MX_GPIO_Init();
 80014f0:	f000 f8b2 	bl	8001658 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <main+0x5c>)
 80014f6:	f001 fac3 	bl	8002a80 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


 setTimer1(110);
 80014fa:	206e      	movs	r0, #110	; 0x6e
 80014fc:	f000 f928 	bl	8001750 <setTimer1>
 setTimer2(120);
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 f95d 	bl	80017c0 <setTimer2>
 setTimer3(130);
 8001506:	2082      	movs	r0, #130	; 0x82
 8001508:	f000 f976 	bl	80017f8 <setTimer3>
 setTimer4(140);
 800150c:	208c      	movs	r0, #140	; 0x8c
 800150e:	f000 f98f 	bl	8001830 <setTimer4>
 setTimer5(150);
 8001512:	2096      	movs	r0, #150	; 0x96
 8001514:	f000 f938 	bl	8001788 <setTimer5>
 setTimer6(160);
 8001518:	20a0      	movs	r0, #160	; 0xa0
 800151a:	f000 f9a5 	bl	8001868 <setTimer6>
 setTimer7(170);
 800151e:	20aa      	movs	r0, #170	; 0xaa
 8001520:	f000 f9be 	bl	80018a0 <setTimer7>
 setTimer8(180);
 8001524:	20b4      	movs	r0, #180	; 0xb4
 8001526:	f000 f9d7 	bl	80018d8 <setTimer8>
 LED_STATE1=INIT_STATE;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <main+0x60>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
 LED_STATE2=INIT_STATE;
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <main+0x64>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 fsm_manual_run();
 8001536:	f7ff fd13 	bl	8000f60 <fsm_manual_run>
 800153a:	e7fc      	b.n	8001536 <main+0x56>
 800153c:	200000f8 	.word	0x200000f8
 8001540:	20000050 	.word	0x20000050
 8001544:	20000054 	.word	0x20000054

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b090      	sub	sp, #64	; 0x40
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	2228      	movs	r2, #40	; 0x28
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fe42 	bl	80031e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001572:	2310      	movs	r3, #16
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fe52 	bl	8002228 <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800158a:	f000 f8dc 	bl	8001746 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 f8be 	bl	8002728 <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015b2:	f000 f8c8 	bl	8001746 <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	3740      	adds	r7, #64	; 0x40
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_TIM2_Init+0x94>)
 80015de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_TIM2_Init+0x94>)
 80015e6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_TIM2_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_TIM2_Init+0x94>)
 80015f4:	2209      	movs	r2, #9
 80015f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_TIM2_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_TIM2_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_TIM2_Init+0x94>)
 8001606:	f001 f9eb 	bl	80029e0 <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001610:	f000 f899 	bl	8001746 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_TIM2_Init+0x94>)
 8001622:	f001 fb69 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800162c:	f000 f88b 	bl	8001746 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM2_Init+0x94>)
 800163e:	f001 fd41 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001648:	f000 f87d 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000f8 	.word	0x200000f8

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <MX_GPIO_Init+0xbc>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a28      	ldr	r2, [pc, #160]	; (8001714 <MX_GPIO_Init+0xbc>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <MX_GPIO_Init+0xbc>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <MX_GPIO_Init+0xbc>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <MX_GPIO_Init+0xbc>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <MX_GPIO_Init+0xbc>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 800169c:	2200      	movs	r2, #0
 800169e:	f64f 411e 	movw	r1, #64542	; 0xfc1e
 80016a2:	481d      	ldr	r0, [pc, #116]	; (8001718 <MX_GPIO_Init+0xc0>)
 80016a4:	f000 fd8f 	bl	80021c6 <HAL_GPIO_WritePin>
                          |RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED2_Pin
                          |GREEN_LED2_Pin|YELLOW_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG3_Pin
 80016a8:	2200      	movs	r2, #0
 80016aa:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80016ae:	481b      	ldr	r0, [pc, #108]	; (800171c <MX_GPIO_Init+0xc4>)
 80016b0:	f000 fd89 	bl	80021c6 <HAL_GPIO_WritePin>
                          |SEG1_Pin|SEG2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_0_Pin EN_1_Pin EN_2_Pin EN_3_Pin
                           RED_LED1_Pin GREEN_LED1_Pin YELLOW_LED1_Pin RED_LED2_Pin
                           GREEN_LED2_Pin YELLOW_LED2_Pin */
  GPIO_InitStruct.Pin = EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 80016b4:	f64f 431e 	movw	r3, #64542	; 0xfc1e
 80016b8:	60bb      	str	r3, [r7, #8]
                          |RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED2_Pin
                          |GREEN_LED2_Pin|YELLOW_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2302      	movs	r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	4812      	ldr	r0, [pc, #72]	; (8001718 <MX_GPIO_Init+0xc0>)
 80016ce:	f000 fbe9 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80016d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016dc:	2301      	movs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <MX_GPIO_Init+0xc0>)
 80016e8:	f000 fbdc 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG0_Pin
                           SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG3_Pin
 80016ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80016f0:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_GPIO_Init+0xc4>)
 8001706:	f000 fbcd 	bl	8001ea4 <HAL_GPIO_Init>

}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40010800 	.word	0x40010800
 800171c:	40010c00 	.word	0x40010c00

08001720 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	timerRun();
 8001728:	f000 f8f2 	bl	8001910 <timerRun>
	    getKeyInput(0);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff f9a3 	bl	8000a78 <getKeyInput>
		getKeyInput(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff f9a0 	bl	8000a78 <getKeyInput>
		getKeyInput(2);
 8001738:	2002      	movs	r0, #2
 800173a:	f7ff f99d 	bl	8000a78 <getKeyInput>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174a:	b672      	cpsid	i
}
 800174c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174e:	e7fe      	b.n	800174e <Error_Handler+0x8>

08001750 <setTimer1>:




void setTimer1(int duration)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/10 ;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <setTimer1+0x2c>)
 800175c:	fb82 1203 	smull	r1, r2, r2, r3
 8001760:	1092      	asrs	r2, r2, #2
 8001762:	17db      	asrs	r3, r3, #31
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <setTimer1+0x30>)
 8001768:	6013      	str	r3, [r2, #0]
	timer1_flag    =  0 ;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <setTimer1+0x34>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	66666667 	.word	0x66666667
 8001780:	200000b8 	.word	0x200000b8
 8001784:	200000bc 	.word	0x200000bc

08001788 <setTimer5>:
void setTimer5(int duration)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/10 ;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <setTimer5+0x2c>)
 8001794:	fb82 1203 	smull	r1, r2, r2, r3
 8001798:	1092      	asrs	r2, r2, #2
 800179a:	17db      	asrs	r3, r3, #31
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <setTimer5+0x30>)
 80017a0:	6013      	str	r3, [r2, #0]
	timer5_flag    =  0 ;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <setTimer5+0x34>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	66666667 	.word	0x66666667
 80017b8:	200000d8 	.word	0x200000d8
 80017bc:	200000dc 	.word	0x200000dc

080017c0 <setTimer2>:
void setTimer2(int duration)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/10 ;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <setTimer2+0x2c>)
 80017cc:	fb82 1203 	smull	r1, r2, r2, r3
 80017d0:	1092      	asrs	r2, r2, #2
 80017d2:	17db      	asrs	r3, r3, #31
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <setTimer2+0x30>)
 80017d8:	6013      	str	r3, [r2, #0]
	timer2_flag    =  0 ;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <setTimer2+0x34>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	66666667 	.word	0x66666667
 80017f0:	200000c0 	.word	0x200000c0
 80017f4:	200000c4 	.word	0x200000c4

080017f8 <setTimer3>:
void setTimer3(int duration)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/10 ;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <setTimer3+0x2c>)
 8001804:	fb82 1203 	smull	r1, r2, r2, r3
 8001808:	1092      	asrs	r2, r2, #2
 800180a:	17db      	asrs	r3, r3, #31
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	4a06      	ldr	r2, [pc, #24]	; (8001828 <setTimer3+0x30>)
 8001810:	6013      	str	r3, [r2, #0]
	timer3_flag    =  0 ;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <setTimer3+0x34>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	66666667 	.word	0x66666667
 8001828:	200000c8 	.word	0x200000c8
 800182c:	200000cc 	.word	0x200000cc

08001830 <setTimer4>:
void setTimer4(int duration)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/10 ;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <setTimer4+0x2c>)
 800183c:	fb82 1203 	smull	r1, r2, r2, r3
 8001840:	1092      	asrs	r2, r2, #2
 8001842:	17db      	asrs	r3, r3, #31
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	4a06      	ldr	r2, [pc, #24]	; (8001860 <setTimer4+0x30>)
 8001848:	6013      	str	r3, [r2, #0]
	timer4_flag    =  0 ;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <setTimer4+0x34>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	66666667 	.word	0x66666667
 8001860:	200000d0 	.word	0x200000d0
 8001864:	200000d4 	.word	0x200000d4

08001868 <setTimer6>:
void setTimer6(int duration)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/10 ;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <setTimer6+0x2c>)
 8001874:	fb82 1203 	smull	r1, r2, r2, r3
 8001878:	1092      	asrs	r2, r2, #2
 800187a:	17db      	asrs	r3, r3, #31
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	4a06      	ldr	r2, [pc, #24]	; (8001898 <setTimer6+0x30>)
 8001880:	6013      	str	r3, [r2, #0]
	timer6_flag    =  0 ;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <setTimer6+0x34>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	66666667 	.word	0x66666667
 8001898:	200000e0 	.word	0x200000e0
 800189c:	200000e4 	.word	0x200000e4

080018a0 <setTimer7>:
void setTimer7(int duration)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/10 ;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <setTimer7+0x2c>)
 80018ac:	fb82 1203 	smull	r1, r2, r2, r3
 80018b0:	1092      	asrs	r2, r2, #2
 80018b2:	17db      	asrs	r3, r3, #31
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <setTimer7+0x30>)
 80018b8:	6013      	str	r3, [r2, #0]
	timer7_flag    =  0 ;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <setTimer7+0x34>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	66666667 	.word	0x66666667
 80018d0:	200000e8 	.word	0x200000e8
 80018d4:	200000ec 	.word	0x200000ec

080018d8 <setTimer8>:
void setTimer8(int duration)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/10 ;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <setTimer8+0x2c>)
 80018e4:	fb82 1203 	smull	r1, r2, r2, r3
 80018e8:	1092      	asrs	r2, r2, #2
 80018ea:	17db      	asrs	r3, r3, #31
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	4a06      	ldr	r2, [pc, #24]	; (8001908 <setTimer8+0x30>)
 80018f0:	6013      	str	r3, [r2, #0]
	timer8_flag    =  0 ;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <setTimer8+0x34>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	66666667 	.word	0x66666667
 8001908:	200000f0 	.word	0x200000f0
 800190c:	200000f4 	.word	0x200000f4

08001910 <timerRun>:
void timerRun()
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	if(timer1_counter> 0 )
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <timerRun+0x10c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	dd0b      	ble.n	8001934 <timerRun+0x24>
	{
		timer1_counter-- ;
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <timerRun+0x10c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3b01      	subs	r3, #1
 8001922:	4a3e      	ldr	r2, [pc, #248]	; (8001a1c <timerRun+0x10c>)
 8001924:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0 )
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <timerRun+0x10c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	dc02      	bgt.n	8001934 <timerRun+0x24>
		{
			timer1_flag = 1  ;
 800192e:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <timerRun+0x110>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter> 0 )
 8001934:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <timerRun+0x114>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	dd0b      	ble.n	8001954 <timerRun+0x44>
		{
			timer2_counter-- ;
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <timerRun+0x114>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	4a38      	ldr	r2, [pc, #224]	; (8001a24 <timerRun+0x114>)
 8001944:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0 )
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <timerRun+0x114>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dc02      	bgt.n	8001954 <timerRun+0x44>
			{
				timer2_flag = 1  ;
 800194e:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <timerRun+0x118>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter> 0 )
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <timerRun+0x11c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd0b      	ble.n	8001974 <timerRun+0x64>
		{
			timer3_counter-- ;
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <timerRun+0x11c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <timerRun+0x11c>)
 8001964:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0 )
 8001966:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <timerRun+0x11c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	dc02      	bgt.n	8001974 <timerRun+0x64>
			{
				timer3_flag = 1  ;
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <timerRun+0x120>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer4_counter> 0 )
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <timerRun+0x124>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	dd0b      	ble.n	8001994 <timerRun+0x84>
		{
			timer4_counter-- ;
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <timerRun+0x124>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3b01      	subs	r3, #1
 8001982:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <timerRun+0x124>)
 8001984:	6013      	str	r3, [r2, #0]
			if(timer4_counter <= 0 )
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <timerRun+0x124>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	dc02      	bgt.n	8001994 <timerRun+0x84>
			{
				timer4_flag = 1  ;
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <timerRun+0x128>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer5_counter> 0 )
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <timerRun+0x12c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	dd0b      	ble.n	80019b4 <timerRun+0xa4>
			{
				timer5_counter-- ;
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <timerRun+0x12c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <timerRun+0x12c>)
 80019a4:	6013      	str	r3, [r2, #0]
				if(timer5_counter <= 0 )
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <timerRun+0x12c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	dc02      	bgt.n	80019b4 <timerRun+0xa4>
				{
					timer5_flag = 1  ;
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <timerRun+0x130>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
				}
			}
	if(timer6_counter> 0 )
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <timerRun+0x134>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	dd0b      	ble.n	80019d4 <timerRun+0xc4>
				{
					timer6_counter-- ;
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <timerRun+0x134>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <timerRun+0x134>)
 80019c4:	6013      	str	r3, [r2, #0]
					if(timer6_counter <= 0 )
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <timerRun+0x134>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dc02      	bgt.n	80019d4 <timerRun+0xc4>
					{
						timer6_flag = 1  ;
 80019ce:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <timerRun+0x138>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
					}
				}
	if(timer7_counter> 0 )
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <timerRun+0x13c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	dd0b      	ble.n	80019f4 <timerRun+0xe4>
					{
						timer7_counter-- ;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <timerRun+0x13c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <timerRun+0x13c>)
 80019e4:	6013      	str	r3, [r2, #0]
						if(timer7_counter <= 0 )
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <timerRun+0x13c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	dc02      	bgt.n	80019f4 <timerRun+0xe4>
						{
							timer7_flag = 1  ;
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <timerRun+0x140>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
						}
					}
	if(timer8_counter> 0 )
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <timerRun+0x144>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dd0b      	ble.n	8001a14 <timerRun+0x104>
						{
							timer8_counter-- ;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <timerRun+0x144>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <timerRun+0x144>)
 8001a04:	6013      	str	r3, [r2, #0]
							if(timer8_counter <= 0 )
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <timerRun+0x144>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	dc02      	bgt.n	8001a14 <timerRun+0x104>
							{
								timer8_flag = 1  ;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <timerRun+0x148>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
							}
						}
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	200000b8 	.word	0x200000b8
 8001a20:	200000bc 	.word	0x200000bc
 8001a24:	200000c0 	.word	0x200000c0
 8001a28:	200000c4 	.word	0x200000c4
 8001a2c:	200000c8 	.word	0x200000c8
 8001a30:	200000cc 	.word	0x200000cc
 8001a34:	200000d0 	.word	0x200000d0
 8001a38:	200000d4 	.word	0x200000d4
 8001a3c:	200000d8 	.word	0x200000d8
 8001a40:	200000dc 	.word	0x200000dc
 8001a44:	200000e0 	.word	0x200000e0
 8001a48:	200000e4 	.word	0x200000e4
 8001a4c:	200000e8 	.word	0x200000e8
 8001a50:	200000ec 	.word	0x200000ec
 8001a54:	200000f0 	.word	0x200000f0
 8001a58:	200000f4 	.word	0x200000f4

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6193      	str	r3, [r2, #24]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_MspInit+0x60>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_MspInit+0x60>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000

08001ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad0:	d113      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_TIM_Base_MspInit+0x44>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <HAL_TIM_Base_MspInit+0x44>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_TIM_Base_MspInit+0x44>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	201c      	movs	r0, #28
 8001af0:	f000 f9a1 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af4:	201c      	movs	r0, #28
 8001af6:	f000 f9ba 	bl	8001e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4e:	f000 f87f 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM2_IRQHandler+0x10>)
 8001b5e:	f000 ffdb 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200000f8 	.word	0x200000f8

08001b6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b78:	f7ff fff8 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b7e:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b80:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b94:	4c09      	ldr	r4, [pc, #36]	; (8001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f001 faf9 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba6:	f7ff fc9b 	bl	80014e0 <main>
  bx lr
 8001baa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001bb4:	08003234 	.word	0x08003234
  ldr r2, =_sbss
 8001bb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001bbc:	20000144 	.word	0x20000144

08001bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_2_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x28>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x28>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f923 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff ff3c 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f93b 	bl	8001e8a <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f903 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000068 	.word	0x20000068
 8001c48:	20000070 	.word	0x20000070
 8001c4c:	2000006c 	.word	0x2000006c

08001c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_IncTick+0x1c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_IncTick+0x20>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <HAL_IncTick+0x20>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000070 	.word	0x20000070
 8001c70:	20000140 	.word	0x20000140

08001c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <HAL_GetTick+0x10>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	20000140 	.word	0x20000140

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4906      	ldr	r1, [pc, #24]	; (8001d20 <__NVIC_EnableIRQ+0x34>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff90 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff2d 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff42 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff90 	bl	8001d78 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5f 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff35 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffa2 	bl	8001ddc <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb6:	e148      	b.n	800214a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8137 	bne.w	8002144 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4aa3      	ldr	r2, [pc, #652]	; (8002168 <HAL_GPIO_Init+0x2c4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d05e      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001ee0:	4aa1      	ldr	r2, [pc, #644]	; (8002168 <HAL_GPIO_Init+0x2c4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d875      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001ee6:	4aa1      	ldr	r2, [pc, #644]	; (800216c <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d058      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001eec:	4a9f      	ldr	r2, [pc, #636]	; (800216c <HAL_GPIO_Init+0x2c8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d86f      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a9f      	ldr	r2, [pc, #636]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d052      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001ef8:	4a9d      	ldr	r2, [pc, #628]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d869      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001efe:	4a9d      	ldr	r2, [pc, #628]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d04c      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001f04:	4a9b      	ldr	r2, [pc, #620]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d863      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f0a:	4a9b      	ldr	r2, [pc, #620]	; (8002178 <HAL_GPIO_Init+0x2d4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d046      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001f10:	4a99      	ldr	r2, [pc, #612]	; (8002178 <HAL_GPIO_Init+0x2d4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d85d      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d82a      	bhi.n	8001f70 <HAL_GPIO_Init+0xcc>
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d859      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_GPIO_Init+0x80>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f9f 	.word	0x08001f9f
 8001f28:	08001f79 	.word	0x08001f79
 8001f2c:	08001f8b 	.word	0x08001f8b
 8001f30:	08001fcd 	.word	0x08001fcd
 8001f34:	08001fd3 	.word	0x08001fd3
 8001f38:	08001fd3 	.word	0x08001fd3
 8001f3c:	08001fd3 	.word	0x08001fd3
 8001f40:	08001fd3 	.word	0x08001fd3
 8001f44:	08001fd3 	.word	0x08001fd3
 8001f48:	08001fd3 	.word	0x08001fd3
 8001f4c:	08001fd3 	.word	0x08001fd3
 8001f50:	08001fd3 	.word	0x08001fd3
 8001f54:	08001fd3 	.word	0x08001fd3
 8001f58:	08001fd3 	.word	0x08001fd3
 8001f5c:	08001fd3 	.word	0x08001fd3
 8001f60:	08001fd3 	.word	0x08001fd3
 8001f64:	08001fd3 	.word	0x08001fd3
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f95 	.word	0x08001f95
 8001f70:	4a82      	ldr	r2, [pc, #520]	; (800217c <HAL_GPIO_Init+0x2d8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f76:	e02c      	b.n	8001fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e029      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	3304      	adds	r3, #4
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e024      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e01f      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	e01a      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e013      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	611a      	str	r2, [r3, #16]
          break;
 8001fbe:	e009      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	615a      	str	r2, [r3, #20]
          break;
 8001fca:	e003      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          break;
 8001fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d801      	bhi.n	8001fde <HAL_GPIO_Init+0x13a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_Init+0x13e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	; 0xff
 8001fe8:	d802      	bhi.n	8001ff0 <HAL_GPIO_Init+0x14c>
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x152>
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3b08      	subs	r3, #8
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	431a      	orrs	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8090 	beq.w	8002144 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <HAL_GPIO_Init+0x2dc>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a55      	ldr	r2, [pc, #340]	; (8002180 <HAL_GPIO_Init+0x2dc>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b53      	ldr	r3, [pc, #332]	; (8002180 <HAL_GPIO_Init+0x2dc>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800203c:	4a51      	ldr	r2, [pc, #324]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a49      	ldr	r2, [pc, #292]	; (8002188 <HAL_GPIO_Init+0x2e4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00d      	beq.n	8002084 <HAL_GPIO_Init+0x1e0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_GPIO_Init+0x2e8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x1dc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a47      	ldr	r2, [pc, #284]	; (8002190 <HAL_GPIO_Init+0x2ec>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_GPIO_Init+0x1d8>
 8002078:	2302      	movs	r3, #2
 800207a:	e004      	b.n	8002086 <HAL_GPIO_Init+0x1e2>
 800207c:	2303      	movs	r3, #3
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x1e2>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_GPIO_Init+0x1e2>
 8002084:	2300      	movs	r3, #0
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002096:	493b      	ldr	r1, [pc, #236]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4933      	ldr	r1, [pc, #204]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	492d      	ldr	r1, [pc, #180]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60cb      	str	r3, [r1, #12]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4929      	ldr	r1, [pc, #164]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4923      	ldr	r1, [pc, #140]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	491f      	ldr	r1, [pc, #124]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 8002118:	4013      	ands	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4919      	ldr	r1, [pc, #100]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	43db      	mvns	r3, r3
 800213e:	4915      	ldr	r1, [pc, #84]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 8002140:	4013      	ands	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3301      	adds	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f aeaf 	bne.w	8001eb8 <HAL_GPIO_Init+0x14>
  }
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	372c      	adds	r7, #44	; 0x2c
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	10320000 	.word	0x10320000
 800216c:	10310000 	.word	0x10310000
 8002170:	10220000 	.word	0x10220000
 8002174:	10210000 	.word	0x10210000
 8002178:	10120000 	.word	0x10120000
 800217c:	10110000 	.word	0x10110000
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	40010800 	.word	0x40010800
 800218c:	40010c00 	.word	0x40010c00
 8002190:	40011000 	.word	0x40011000
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]
 80021d2:	4613      	mov	r3, r2
 80021d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d6:	787b      	ldrb	r3, [r7, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e2:	e003      	b.n	80021ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	611a      	str	r2, [r3, #16]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002208:	887a      	ldrh	r2, [r7, #2]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43d9      	mvns	r1, r3
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	400b      	ands	r3, r1
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e26c      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	4b92      	ldr	r3, [pc, #584]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b04      	cmp	r3, #4
 8002252:	d00c      	beq.n	800226e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d112      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
 8002260:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d10b      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d06c      	beq.n	8002354 <HAL_RCC_OscConfig+0x12c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d168      	bne.n	8002354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e246      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x76>
 8002290:	4b80      	ldr	r3, [pc, #512]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7f      	ldr	r2, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e02e      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7a      	ldr	r2, [pc, #488]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a77      	ldr	r2, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0xbc>
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a71      	ldr	r2, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022e4:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b68      	ldr	r3, [pc, #416]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a67      	ldr	r2, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fcb6 	bl	8001c74 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fcb2 	bl	8001c74 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1fa      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xe4>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fca2 	bl	8001c74 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fc9e 	bl	8001c74 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1e6      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x10c>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d063      	beq.n	800242a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002362:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236e:	4b49      	ldr	r3, [pc, #292]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b08      	cmp	r3, #8
 8002378:	d11c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
 800237a:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e1ba      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	e03a      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff fc57 	bl	8001c74 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7ff fc53 	bl	8001c74 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e19b      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4927      	ldr	r1, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fc36 	bl	8001c74 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7ff fc32 	bl	8001c74 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e17a      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03a      	beq.n	80024ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d019      	beq.n	8002472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7ff fc16 	bl	8001c74 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7ff fc12 	bl	8001c74 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e15a      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f000 fa9a 	bl	80029a4 <RCC_Delay>
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff fbfc 	bl	8001c74 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247e:	e00f      	b.n	80024a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff fbf8 	bl	8001c74 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d908      	bls.n	80024a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e140      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	42420000 	.word	0x42420000
 800249c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b9e      	ldr	r3, [pc, #632]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e9      	bne.n	8002480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a6 	beq.w	8002606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b97      	ldr	r3, [pc, #604]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b94      	ldr	r3, [pc, #592]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a93      	ldr	r2, [pc, #588]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b91      	ldr	r3, [pc, #580]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b8e      	ldr	r3, [pc, #568]	; (8002720 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f2:	4b8b      	ldr	r3, [pc, #556]	; (8002720 <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a8a      	ldr	r2, [pc, #552]	; (8002720 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fbb9 	bl	8001c74 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7ff fbb5 	bl	8001c74 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	; 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0fd      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b81      	ldr	r3, [pc, #516]	; (8002720 <HAL_RCC_OscConfig+0x4f8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x312>
 800252c:	4b7b      	ldr	r3, [pc, #492]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a7a      	ldr	r2, [pc, #488]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	e02d      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x334>
 8002542:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a75      	ldr	r2, [pc, #468]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a72      	ldr	r2, [pc, #456]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x356>
 8002564:	4b6d      	ldr	r3, [pc, #436]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a6c      	ldr	r2, [pc, #432]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a69      	ldr	r2, [pc, #420]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a66      	ldr	r2, [pc, #408]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b64      	ldr	r3, [pc, #400]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a63      	ldr	r2, [pc, #396]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff fb69 	bl	8001c74 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7ff fb65 	bl	8001c74 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0ab      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	4b57      	ldr	r3, [pc, #348]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x37e>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff fb53 	bl	8001c74 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fb4f 	bl	8001c74 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e095      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b48      	ldr	r3, [pc, #288]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a47      	ldr	r2, [pc, #284]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8081 	beq.w	8002712 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b42      	ldr	r3, [pc, #264]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d061      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d146      	bne.n	80026b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <HAL_RCC_OscConfig+0x4fc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fb23 	bl	8001c74 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fb1f 	bl	8001c74 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e067      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d108      	bne.n	800266c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	492d      	ldr	r1, [pc, #180]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a19      	ldr	r1, [r3, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	430b      	orrs	r3, r1
 800267e:	4927      	ldr	r1, [pc, #156]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x4fc>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff faf3 	bl	8001c74 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff faef 	bl	8001c74 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e037      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x46a>
 80026b0:	e02f      	b.n	8002712 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_RCC_OscConfig+0x4fc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fadc 	bl	8001c74 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7ff fad8 	bl	8001c74 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e020      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x498>
 80026de:	e018      	b.n	8002712 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e013      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	42420060 	.word	0x42420060

08002728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0d0      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d910      	bls.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4965      	ldr	r1, [pc, #404]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0b8      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002784:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800278e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	494d      	ldr	r1, [pc, #308]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d040      	beq.n	8002848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07f      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e073      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4936      	ldr	r1, [pc, #216]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7ff fa2c 	bl	8001c74 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7ff fa28 	bl	8001c74 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e053      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d210      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4922      	ldr	r1, [pc, #136]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e032      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4916      	ldr	r1, [pc, #88]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	490e      	ldr	r1, [pc, #56]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b6:	f000 f821 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	490a      	ldr	r1, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	5ccb      	ldrb	r3, [r1, r3]
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1cc>)
 80028d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1d0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f98a 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	08003208 	.word	0x08003208
 80028f4:	20000068 	.word	0x20000068
 80028f8:	2000006c 	.word	0x2000006c

080028fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_GetSysClockFreq+0x94>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x30>
 8002926:	2b08      	cmp	r3, #8
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x36>
 800292a:	e027      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_GetSysClockFreq+0x98>)
 800292e:	613b      	str	r3, [r7, #16]
      break;
 8002930:	e027      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d010      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_GetSysClockFreq+0x94>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0c5b      	lsrs	r3, r3, #17
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_RCC_GetSysClockFreq+0x98>)
 800295e:	fb02 f203 	mul.w	r2, r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e004      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	613b      	str	r3, [r7, #16]
      break;
 800297a:	e002      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCC_GetSysClockFreq+0x98>)
 800297e:	613b      	str	r3, [r7, #16]
      break;
 8002980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002982:	693b      	ldr	r3, [r7, #16]
}
 8002984:	4618      	mov	r0, r3
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	007a1200 	.word	0x007a1200
 8002998:	08003218 	.word	0x08003218
 800299c:	08003228 	.word	0x08003228
 80029a0:	003d0900 	.word	0x003d0900

080029a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <RCC_Delay+0x34>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <RCC_Delay+0x38>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0a5b      	lsrs	r3, r3, #9
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c0:	bf00      	nop
  }
  while (Delay --);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	60fa      	str	r2, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f9      	bne.n	80029c0 <RCC_Delay+0x1c>
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	20000068 	.word	0x20000068
 80029dc:	10624dd3 	.word	0x10624dd3

080029e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e041      	b.n	8002a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff f85a 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 fa56 	bl	8002ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e035      	b.n	8002b04 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_TIM_Base_Start_IT+0x90>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_TIM_Base_Start_IT+0x4e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d004      	beq.n	8002ace <HAL_TIM_Base_Start_IT+0x4e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <HAL_TIM_Base_Start_IT+0x94>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d111      	bne.n	8002af2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b06      	cmp	r3, #6
 8002ade:	d010      	beq.n	8002b02 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	e007      	b.n	8002b02 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40000400 	.word	0x40000400

08002b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d020      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0202 	mvn.w	r2, #2
 8002b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f998 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f98b 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f99a 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d020      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0204 	mvn.w	r2, #4
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f972 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f965 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f974 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0208 	mvn.w	r2, #8
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f94c 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f93f 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f94e 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d020      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0210 	mvn.w	r2, #16
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2208      	movs	r2, #8
 8002c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f926 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002c4c:	e005      	b.n	8002c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f919 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f928 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0201 	mvn.w	r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fd4e 	bl	8001720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa6f 	bl	8003186 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8f8 	bl	8002ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0220 	mvn.w	r2, #32
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa42 	bl	8003174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_ConfigClockSource+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0b4      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x186>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4c:	d03e      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0xd4>
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	f200 8087 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	f000 8086 	beq.w	8002e6a <HAL_TIM_ConfigClockSource+0x172>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d62:	d87f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d01a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xa6>
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d87b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d050      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x11a>
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d877      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d03c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d873      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d058      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x13a>
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d86f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d064      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d86b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d060      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d867      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d05a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	e062      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f000 f96a 	bl	8003086 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e04f      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f000 f953 	bl	8003086 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e03c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 f8ca 	bl	8002f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2150      	movs	r1, #80	; 0x50
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f921 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e10:	e02c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 f8e8 	bl	8002ff4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2160      	movs	r1, #96	; 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f911 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e30:	e01c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 f8aa 	bl	8002f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f901 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 f8f8 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_Base_SetConfig+0x28>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0x28>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <TIM_Base_SetConfig+0xc4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x52>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x52>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <TIM_Base_SetConfig+0xc4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
  }
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400

08002f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 030a 	bic.w	r3, r3, #10
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0210 	bic.w	r2, r3, #16
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800301e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	f043 0307 	orr.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b087      	sub	sp, #28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	609a      	str	r2, [r3, #8]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d8:	2302      	movs	r3, #2
 80030da:	e041      	b.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a14      	ldr	r2, [pc, #80]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d004      	beq.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10c      	bne.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800313a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4313      	orrs	r3, r2
 8003144:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400

08003174 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	2600      	movs	r6, #0
 800319c:	4d0c      	ldr	r5, [pc, #48]	; (80031d0 <__libc_init_array+0x38>)
 800319e:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 80031a0:	1b64      	subs	r4, r4, r5
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	42a6      	cmp	r6, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	f000 f822 	bl	80031f0 <_init>
 80031ac:	2600      	movs	r6, #0
 80031ae:	4d0a      	ldr	r5, [pc, #40]	; (80031d8 <__libc_init_array+0x40>)
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <__libc_init_array+0x44>)
 80031b2:	1b64      	subs	r4, r4, r5
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	42a6      	cmp	r6, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c0:	4798      	blx	r3
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ca:	4798      	blx	r3
 80031cc:	3601      	adds	r6, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	0800322c 	.word	0x0800322c
 80031d4:	0800322c 	.word	0x0800322c
 80031d8:	0800322c 	.word	0x0800322c
 80031dc:	08003230 	.word	0x08003230

080031e0 <memset>:
 80031e0:	4603      	mov	r3, r0
 80031e2:	4402      	add	r2, r0
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d100      	bne.n	80031ea <memset+0xa>
 80031e8:	4770      	bx	lr
 80031ea:	f803 1b01 	strb.w	r1, [r3], #1
 80031ee:	e7f9      	b.n	80031e4 <memset+0x4>

080031f0 <_init>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr

080031fc <_fini>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr
